{
    "info": [
        "AP Computer Science A\nCourse Syllabus and Planning Guide\n2020–2021",
        "UTeach CS A\nCourse Syllabus and Planning Guide\nTable of Contents\nCurricular Requirements 3\nCourse Description 4\nCourse Framework 5\nUnit Guides 9\nUnit 1: Introductions Are in Order 11\nUnit 1 Description & Topics 11\nUnit 1 Schedule 12\nUnit 2: Primitive Control 13\nUnit 2 Description & Topics 13\nUnit 2 Schedule 15\nUnit 3: Strings and Iteration 17\nUnit 3 Description & Topics 17\nUnit 3 Schedule 18\nUnit 4: Objects, Classes, and Methods 19\nUnit 4 Description & Topics 19\nUnit 4 Schedule 20\nUnit 5: Arrays, ArrayLists, and 2D Arrays 23\nUnit 5 Description & Topics 23\nUnit 5 Schedule 24\nUnit 6: Inheritance 26\nUnit 6 Description & Topics 26\nUnit 6 Schedule 27\nUnit 7: Searching, Sorting, and Recursion 29\nUnit 7 Description & Topics 29\nUnit 7 Schedule 30\nPedagogical Approaches 31\nResources and Technical Requirements 35\nBack to Table of Contents 2",
        "UTeach CS A\nCourse Syllabus and Planning Guide\nCurricular Requirements\nCurricular Requirements Pages\nCR-1 The teacher and students have access to a college-level computer science textbook, in 4\nprint or electronic format.\nCR-2 The course provides opportunities to deepen student understanding of the required 9-10\ncontent outlined in each of the units described in the AP Course and Exam description.\nCR-3 The course provides opportunities to deepen student understanding of the Big Ideas. 7-8\nCR-4 The course provides opportunities for students to develop the skills related to 5\nComputational Thinking Practice 1: Program Design and Algorithm Development.\nCR-5 The course provides opportunities for students to develop the skills related to 5\nComputational Thinking Practice 2: Code Logic.\nCR-6 The course provides opportunities for students to develop the skills related to 6\nComputational Thinking Practice 3: Code Implementation.\nCR-7 The course provides opportunities for students to develop the skills related to 6\nComputational Thinking Practice 4: Code Testing.\nCR-8 The course provides opportunities for students to develop the skills related to 6\nComputational Thinking Practice 5: Documentation.\nCR-9 The course provides students with hands-on lab experiences to practice programming 32-33\nthrough designing and implementing computer-based solutions to problems.\nBack to Table of Contents 3",
        "UTeach CS A\nCourse Syllabus and Planning Guide\nCourse Description\nDevelopers\nUTeach Computer Science (uteachcs.org)\nUTeach AP Computer Science A has been developed by the UTeach Institute in collaboration\nwith A+ College Ready Alabama.\nCourse Overview\nUTeach AP Computer Science A has been designed as a year-long high school course that fully\naddresses the big ideas, computational thinking practices and skills, and sequenced curriculum\nunits, as specified by the College Board's AP Computer Science A curriculum framework.\nThe lessons and materials used throughout this course incorporate Project-Based Learning\n(PBL), a pedagogical approach that actively engages students in the educational process,\nimproves retention, and develops problem solving, critical thinking, and group communication\nskills. Through this collaborative, learner-centric approach, students are encouraged to explore\nthe advantages and societal impact of computational technology while developing their\nprogramming and computational thinking skills through Java.\nIt is recommended that students have daily access to the Internet. Students are also required to\nhave access to a computer for a minimum of three hours a week.\nCourse Textbook\n[CR-1] UTeach AP CS A has an online textbook available for students and teachers. The textbook\nis hosted by Canvas and is publicly available with no account login or password needed at\nhttps://uteachpd.instructure.com/courses/386/modules.\nProgramming Language Requirements\nStudents will use the Java and Python with Turtle (Unit 1 only) programming languages\nthroughout the course activities and assignments.\nRepl.it (www.repl.it)\nRepl.it is the preferred programming environment for the course, as it provides a simplified and\nfriendly interface supporting multiple programming languages within a single integrated\ndevelopment environment (IDE). This IDE is freely available online and is platform-independent,\nso schools and students can run these applications and develop their own programs on any\navailable computer without having to purchase any additional software or licenses.\nBack to Table of Contents 4",
        "UTeach CS A\nCourse Syllabus and Planning Guide\nCourse Framework\nThe course framework consists of two components: 1) Computational Thinking Practices, and 2)\nCourse Content, which includes Big Ideas, Enduring Understandings, Learning Objectives, and\nEssential Knowledge Statements.\nComputational Thinking Practices\nThe following are examples in the curriculum of an instructional approach or activity that\ndescribes how students will engage with these skills:\nCR-4: 1.B For most of the programming assignments and the unit projects, students build on\nstarter code in Repl.it using instructions on how to complete the code in order to make a\nworking solution to a given problem which assesses mastery of the topics presented in the\nlesson.\nCR-5: 2.D Students engage in an activity in Unit 7 during the lesson on Compare Big O\nInformally in which they read through a code segment and determine how many times the data\nstructure is being accessed. Then they open a program with the same code and run the\nprogram to compare their prediction with the actual statement execution times.\nBack to Table of Contents 5",
        "UTeach CS A\nCourse Syllabus and Planning Guide\nCR-6: 3.B The Unit 4 project – Disease Diagnoser and the Unit 6 project – Hospital Locator ask\nstudents to create a class and write the code to test the implementation of the class.\n3.D 3.E The Unit 5 project – Air Quality Analyzer has students create, traverse and\nmanipulate data in 1D arrays, ArrayLists, and a 2D array.\nCR-7: 4.A Throughout the programming activities, students are asked to test their program\ncode using various test cases. One example is the Palindrome program that students write in\nUnit 3 in which students are to test their code using at least 12 different words to check if they\nare palindromes. For the Unit 7 project in which students write searching and sorting\nalgorithms, students use a small data set for the initial testing and then are given a much larger\ndata set to test the efficiency of their algorithms.\nCR-8: 5.B One of the instructional strategies used as a check for understanding is Thumbs\nUp/Thumbs Down. Students review a code segment and show a thumbs up if the code will work\nas intended or thumbs down if the code will not compile or work as intended. The students\nexplain the syntax or logic error for thumbs down code segments. This strategy is used in Unit 2\nfor conditionals and Unit 3 for iteration.\nBack to Table of Contents 6",
        "UTeach CS A\nCourse Syllabus and Planning Guide\nCourse Content - Big Ideas\nThe big ideas serve as the foundation of the course. They are overarching concepts or themes\nthat are spiraled throughout all seven of the curriculum units and connected to the topics and\nactivities within each unit.\nBig Ideas [CR-3]\nBig Idea 1: MODULARITY (MOD) Along with several smaller programming assignments\nIncorporating elements of abstraction, by breaking within Unit 6, the unit 6 project – Hospital Locator -\nproblems down into interacting pieces, each with their allows students to demonstrate mastery of the\nown purposes, makes writing complex programs Modularity Big Idea by constructing a database\neasier. Abstracting simplifies concepts and processes consisting of a superclass and several subclasses and\nby looking at the big picture rather than being populating the database with real-world data and\noverwhelmed by the details. Modularity in object- searching the data.\noriented programming allows us to use abstraction to\nbreak complex programs down into individual classes\nand methods.\nBig Idea 2: VARIABLES (VAR) Along with several smaller programming assignments\nInformation used as a basis for reasoning, discussion, within Unit 5, the Unit 5 project – Air Quality Analyzer\nor calculation is referred to as data. Programs rely on - allows students to demonstrate mastery of the\nvariables to store data, on data structures to organize Variables Big Idea by analyzing real-world data stored\nmultiple values when program complexity increases, in each of the 3 data structures: 1D array, ArrayList,\nand on algorithms to sort, access, and manipulate this and 2D array.\ndata. Variables create data abstractions, as they can\nrepresent a set of possible values or a group of related\nvalues.\nBig Idea 3: CONTROL (CON) Students will have many opportunities to demonstrate\nDoing things in order; making decisions, and doing the the use of control structures throughout the units.\nsame process multiple times are represented in code Some example activities are:\nby using control structures and specifying the order in • In Unit 2, students write a program using\nwhich instructions are executed. Programmers need to conditionals and nested if statements in order to\nthink algorithmically in order to define and interpret\ncreate an interactive story using user input\nprocesses that are used in a program.\n• In Unit 3, students create iterative algorithms such\nas reversing all the characters in a word and taking\nthe average of all digits in a number.\nBig Idea 4: IMPACT OF COMPUTING (IOC) In Unit 1, students research and report on computing\nComputers and computing have revolutionized our innovations, then discuss as a class the legal issues and\nlives. To use computing safely and responsibly, we intellectual property concerns surrounding the\nneed to be aware of privacy, security, and ethical development and creation of programs and software.\nissues. As programmers, we need to understand how In Unit 4, students discuss the importance of system\nour programs will be used and be responsible for the reliability and how programmers should make every\nconsequences. effort to maximize system reliability and how using\nclasses and objects (object-oriented programming) can\nhelp with this.\nBack to Table of Contents 7",
        "UTeach CS A\nCourse Syllabus and Planning Guide\nIn Unit 5, students discuss the ethical and security\nissues of gathering and storing personal information\nsuch as names and birthdates.\nBack to Table of Contents 8",
        "UTeach CS A\nCourse Syllabus and Planning Guide\nUnit Guides\nCourse Units [CR-2]\nUnit 1: Introductions Are in Big Ideas: Computational Thinking Practices:\nOrder Modularity 1 2 3 4 5\nControl\nUnit 1 is a gentle introduction to the\nImpact of Computing\nAP Computer Science A course and\ntext-based programming languages.\nThe programming activities in Unit 1 Enduring Understandings: Aligned to College Board CED Units:\nuse the Python with Turtle graphical MOD-1, MOD-2, CON-2, None-this unit is an introduction to the\nprogramming language and Repl.it is IOC-1 UTeach CSA course narrative and using a\ntext-based programming language.\nthe online IDE used throughout the\ncourse.\nUnit 2: Primitive Control Big Ideas: Computational Thinking Practices:\nThis unit provides an introduction to Modularity 1 2 3 4 5\nobject-oriented programming, Variables\nprimitive data types in Java, Control\nmathematical expressions and\noperators, Boolean expressions, Enduring Understandings: Aligned to College Board CED Units:\nconditionals, using objects, and the MOD-1, VAR-1, CON-1, 1, 2 and 3\nMath class. CON-2\nUnit 3: Strings and Iteration Big Ideas: Computational Thinking Practices:\nUnit 3 concentrates on the String class Modularity 1 2 3 4 5\nand the String class methods. This unit Variables\nintroduces many of the most common Control\nstring manipulating algorithms as well\nas iteration and the Java control Enduring Understandings: Aligned to College Board CED Units:\nstructures while loop and for loop that MOD-1, VAR-1, CON-2 2 and 4\nallow for the use of repetition in\nprograms.\nUnit 4: Objects, Classes, and Big Ideas: Computational Thinking Practices:\nMethods Modularity 1 2 3 4 5\nUnit 4 takes a deep dive into Object-\nVariables\nOriented Programming by introducing\nImpact of Computing\nall the components of a class including\nEnduring Understandings: Aligned to College Board CED Unit:\nprivate instance variables,\nMOD-1, MOD-2, MOD-3, 5\nconstructors, accessor methods,\nVAR-1, IOC-1\nmutator methods, and helper\nmethods. This unit also covers\naccessibility and the different\ncategories of methods from static and\nnon-static to void and non-void.\nBack to Table of Contents 9",
        "UTeach CS A\nCourse Syllabus and Planning Guide\nUnit 5: Arrays, ArrayLists, and Big Ideas: Computational Thinking Practices:\n2D Arrays Variables 1 2 3 4 5\nUnit 5 introduces 3 different data\nControl\nImpact of Computing\nstructures used to store data in Java:\nthe array, ArrayList, and 2D array, and\nEnduring Understandings: Aligned to College Board CED Units:\nthe syntax and traversal methods for\nthe most common algorithms for VAR-1, VAR-2, CON-2, 6, 7 and 8\nIOC-1\nprocessing data.\nUnit 6: Inheritance Big Ideas: Computational Thinking Practices:\nUnit 6 takes a comprehensive look at Modularity 1 3 5\ntwo relationships between classes in\nJava: inheritance and composition. Enduring Understandings: Aligned to College Board CED Unit:\nTopics covered in depth are MOD-2, MOD-3 9\nsuperclasses and subclasses,\nconstructors of the subclasses,\noverriding methods, composition, the\nObject class, and polymorphism.\nUnit 7: Searching, Sorting, and Big Ideas: Computational Thinking Practices:\nRecursion Control 1 2 3 5\nThis unit covers different search\nalgorithms, the selection sort and\nEnduring Understanding:\ninsertion sort, Big O, recursion, CON-2 Aligned to College Board CED Units:\nrecursive search and sort algorithms. 6, 7 and 10\nNOTES: The following topics are taught throughout the course as appropriate:\n• Exception (CED Units 2, 6, 8)\n• Ethical and Social Implications (CED Units 5, 7)\nBack to Table of Contents 10",
        "UTeach CS A\nCourse Syllabus and Planning Guide\nUnit 1: Introductions Are in Order\nUnit 1 is designed to be a gentle introduction to text-based programming using Python and\nPython with Turtle as a graphical language. Throughout Unit 1, students master basic coding\ntools and concepts, such as algorithms and abstraction, which can be easily applied in later\nunits using Java.\nThe Big Ideas of Modularity, Control, and Impact of Computing are all covered in Unit 1 using\nPython. These are the Enduring Understandings covered in this unit:\n• MOD-1: Some objects or concepts are so frequently represented that programmers can\ndraw upon existing code that has already been tested, enabling them to write solutions\nmore quickly and with a greater degree of confidence.\n• MOD-2: Programmers use code to represent a physical object or nonphysical concept,\nreal or imagined, by defining a class based on the attributes and/or behaviors of the\nobject or concept.\n• CON-2: Programmers incorporate iteration and selection into code as a way of providing\ninstructions for the computer to process each of the many possible input values.\n• IOC-1: While programs are typically designed to achieve a specific purpose, they may\nhave unintended consequences.\nUnit 1 Topics\nOver the course of this unit and the unit project, students will learn to:\n• Collaborate with classmates and establish group norms.\n• Use an online IDE to create programs.\n• Write code to draw graphics using Python with Turtle.\n• Write an algorithm.\n• Implement an algorithm in Python code.\n• Debug a program through error detection and testing.\n• Use abstraction by incorporating built-in functions from Python to draw shapes.\n• Create modules in a program to aid in readability.\n• Comment code to aid in readability.\nBack to Table of Contents 11",
        "UTeach CS A\nCourse Syllabus and Planning Guide\nUnit 1 Schedule (14 Days)\nDay Topic Lessons Learning Objectives Essential Knowledge\nAvatar Creator Project\nU1D1 Unit Project Non-AP Non-AP\n(1 of 5)\nWhat is Computer\nU1D2\nScience?\nIntroduction to\nU1D3 Introduction to APCSA IOC-1.A IOC-1.A.2, IOC-1.A.3\nAPCSA\nMy First Python\nU1D4\nProgram\nU1D5 Writing Algorithms\nAlgorithms CON-2.D, MOD-2.C MOD-2.C.1\nImplementing an\nU1D6\nAlgorithm\nU1D7 Abstraction Draw an Emoji MOD-1.E MOD-1.E.2\nAvatar Creator Project CON-2.D, MOD-1.E, MOD-\nU1D8 Unit Project MOD-1.E.2, MOD-2.C.1\n(2 of 5) 2.C\nModular\nU1D9 Modular Programming MOD-1.E MOD-1.E.2, MOD-1.E.3\nProgramming\nAvatar Creator Project CON-2.D, MOD-1.E, MOD- MOD-1.E.2, MOD-1.E.3,\nU1D10 Unit Project\n(3 of 5) 2.C MOD-2.C.1\nU1D11 Unit Test Review Unit 1 Test Review None None\nAvatar Creator Project CON-2.D, MOD-1.E, MOD- MOD-1.E.2, MOD-1.E.3,\nU1D12 Unit Project\n(4 of 5) 2.C MOD-2.C.1\nU1D13 Unit Test Unit 1 Test None None\nAvatar Creator\nU1D14 Unit Project None None\nPresentation (5 of 5)\nBack to Table of Contents 12",
        "UTeach CS A\nCourse Syllabus and Planning Guide\nUnit 2: Primitive Control\nUnit 2 covers the College Board Units 1-3. Unit 2 jumps right into programming in Java. Over\nthe course of this unit, object-oriented programming, a style of programming that uses classes\nand objects, is introduced. Also, primitive data types in Java, mathematical expressions\noperators, Boolean expressions, conditionals, using objects, and a few of the Math class\nmethods are studied.\nThe Big Ideas covered in this unit are Modularity, Variables, and Control. These are the\nEnduring Understandings covered in this unit:\n• MOD-1: Some objects or concepts are so frequently represented that programmers can\ndraw upon existing code that has already been tested, enabling them to write solutions\nmore quickly and with a greater degree of confidence.\n• VAR-1: To find specific solutions to generalizable problems, programmers include\nvariables in their code so that the same algorithm runs using different input values.\n• CON-1: The way variables and operators are sequenced and combined in an expression\ndetermines the computed result.\n• CON-2: Programmers incorporate iteration and selection into code as a way of providing\ninstructions for the computer to process each of the many possible input values.\nThese are the Computational Thinking Skills addressed:\n• 1.A Determine an appropriate program design to solve a problem or accomplish a task.\n• 1.B Determine code that would be used to complete code segments.\n• 1.C Determine code that would be used to interact with completed program code.\n• 2.A Apply the meaning of specific operators.\n• 2.B Determine the result or output based on statement execution order in a code\nsegment without method calls (other than output).\n• 2.C Determine the result or output based on the statement execution order in a code\nsegment containing method calls.\n• 3.A Write program code to create objects of a class and call methods.\n• 3.C Write program code to satisfy method specifications using expressions, conditional\nstatements, and iterative statements.\n• 4.A Use test-cases to find errors or validate results.\n• 4.B Identify errors in program code.\n• 4.C Determine if two or more code segments yield equivalent results.\n• 5.A Describe the behavior of a given segment of program code.\n• 5.B Explain why a code segment will not compile or work as intended.\nBack to Table of Contents 13",
        "UTeach CS A\nCourse Syllabus and Planning Guide\nUnit 2 Topics\nOur Unit 2 covers the College Boards Units 1, 2, and 3. Over the course of this unit and the unit\nproject, the following topics will be covered and teachers may use these in the AP Classroom to\nfilter questions for formative and summative assessments:\n• 1.1 Why Programming? Why Java?\n• 1.2 Variables and Data Types\n• 1.3 Expressions and Assignment Statements\n• 1.4 Compound Assignment Operators\n• 1.5 Casting and Ranges of Variables\n• 2.1 Objects: Instances of Classes\n• 2.2 Creating and Storing Objects (Instantiation)\n• 2.3 Calling a Void Method\n• 2.4 Calling a Void Method with Parameters\n• 2.5 Calling a Non-void Method\n• 2.6 String Objects: Concatenation, Literals, and More\n• 2.7 String Methods\n• 2.8 Wrapper Classes: Integer and Double\n• 2.9 Using the Math Class\n• 3.1 Boolean Expressions\n• 3.2 if Statements and Control Flow\n• 3.3 if-else Statements\n• 3.4 else if Statements\n• 3.5 Compound Boolean Expressions\n• 3.6 Equivalent Boolean Expressions\n• 3.7 Comparing Objects\nBack to Table of Contents 14",
        "UTeach CS A\nCourse Syllabus and Planning Guide\nUnit 2 Schedule (22 Days)\nDay Topic Lessons Learning Objectives Essential Knowledge\nResource Finder Project (1 MOD-1.A.1, MOD-1.A.2,\nU2D1 Unit Project MOD-1.A, VAR-1.A\nof 5) VAR-1.A.1\nVAR-1.B.1, VAR-1.B.2,\nVariables and VAR-1.B.3, VAR-1.C.1,\nU2D2 Variable and Data Types VAR-1.B, VAR-1.C\nData Types VAR-1.C.2, VAR-1.C.3,\nVAR-1.C.4\nCON-1.A.1, CON-1.A.2,\nCON-1.A.3, CON-1.A.4,\nSimple Assignment CON-1.A.5, CON-1.A.6,\nU2D3 CON-1.A, CON-1.B\nExpressions and Statements CON-1.A.6, CON-1.A.7,\nAssignment CON-1.A.8, CON-1.B.1,\nStatements CON-1.B.2, CON-1.B.3\nCompound Assignment\nU2D4 CON-1.B CON-1.B.4, CON-1.B.5\nOperators\nCON-1.A.1, CON-1.A.2,\nCON-1.A.3, CON-1.A.5,\nResource Finder Project (2 CON-1.A, CON-1.B,\nU2D5 Unit Project CON-1.B.1, CON-1.B.2,\nof 5) CON-1.C\nCON-1.B.3, CON-1.C.4,\nCON-1.C.5, CON-1.C.6\nMOD-1.B.1, MOD-1.B.2,\nMOD-1.C.1, MOD-1.C.2,\nMOD-1.C.3, MOD-1.C.4,\nOverview of Objects and MOD-1.B, MOD-1.C,\nU2D6 MOD-1.C.5, MOD-1.C.6,\nClasses MOD-1.D, VAR-1.D\nMOD-1.D.1, MOD-1.D.2,\nMOD-1.D.3, MOD-1.D.4,\nVAR-1.D.1, VAR-1.D.2\nUsing Objects\nMOD-1.E.1, MOD-1.E.2,\nMOD-1.E.3, MOD-1.E.4,\nMOD-1.E, MOD-1.F, MOD-1.E.5, MOD-1.E.6,\nU2D7 Calling Methods\nMOD-1.G MOD-1.E.7, MOD-1.E.8,\nMOD-1.F.1, MOD-1.F.2,\nMOD-1.F.3, MOD-1.G.1\nVAR-1.E.1, VAR-1.E.2,\nIntroduction to VAR-1.E.6, VAR-1.E.7,\nU2D8-9 String Objects & Methods VAR-1.E\nStrings VAR-1.E.8, VAR-1.E.9,\nVAR-1.E.12\nVAR-1.F.1, VAR-1.F.2,\nVAR-1.F.3, VAR-1.F.4,\nWrapper VAR-1.F.5, VAR-1.F.6,\nWrapper Classes/Math VAR-1.F, CON-1.D,\nU2D10 Classes/Math VAR-1.F.7, CON-1.D.1,\nClass MOD-1.H\nClass CON-1.D.2, CON-1.D.3,\nCON-1.D.4, MOD-1.H\nBack to Table of Contents 15",
        "UTeach CS A\nCourse Syllabus and Planning Guide\nCON-1.E.1, CON-1.E.2,\nU2D11 Truth Tables and Booleans CON-1.E\nCON-1.E.3\nCompound Boolean CON-1.F.1, CON-1.F.2,\nU2D12 Boolean CON-1.F\nExpressions CON-1.F.3\nExpressions\nEquivalent Boolean CON-1.G.1, CON-1.G.2,\nU2D13 CON-1.G\nExpressions CON-1.G.3\nCON-2.A.1, CON-2.A.2,\nU2D14 If Statements CON-2.A\nCON-2.A.3\nConditionals\nU2D15 If/else Statements CON-2.A CON-2.A.4\nU2D16 Else/if Statements CON-2.A, CON-2.B CON-2.A.5, CON-2.B.1\nMOD-1.A.1, VAR-1.A.1,\nVAR-1.B.1, VAR-1.B.2,\nVAR-1.B.3, VAR-1.C.1,\nMOD-1.A, VAR-1.A, VAR- VAR-1.C.2, VAR-1.C.3,\nResource Finder Project (3 1.B, VAR-1.C, CON-1.A, CON-1.A.1, CON-1.A.2,\nU2D17 Unit Project\nof 5) CON-1.B, CON-1.C, CON- CON-1.A.3, CON-1.A.5,\n2.A CON-1.B.1, CON-1.B.2,\nCON-1.B.3, CON-1.C.4,\nCON-2.A.1, CON-2.A.2,\nCON-2.A.3\nComparing CON-1.H.1, CON-1.H.2,\nU2D18 Comparing Objects CON-1.H\nObjects CON-1.H.3, CON-1.H.4\nMOD-1.A.1, VAR-1.A.1,\nVAR-1.B.1, VAR-1.B.2,\nVAR-1.B.3, VAR-1.C.1,\nVAR-1.C.2, VAR-1.C.3,\nMOD-1.A, VAR-1.A, VAR-\nResource Finder Project (4 CON-1.A.1, CON-1.A.2,\nU2D19 Unit Project 1.B, VAR-1.C, CON-1.A,\nof 5) CON-1.A.3, CON-1.A.5,\nCON-1.B, CON-1.CON-2.A\nCON-1.B.1, CON-1.B.2,\nCON-1.B.3, CON-1.C.4,\nCON-2.A.1,, CON-2.C.2,\nCON-2.C.3\nU2D20 Unit Test Review Unit 2 Test Review None None\nU2D21 Unit Test Unit 2 Test None None\nResource Finder\nU2D22 Unit Project None None\nPresentation (5 of 5)\nBack to Table of Contents 16",
        "UTeach CS A\nCourse Syllabus and Planning Guide\nUnit 3: Strings and Iteration\nUnit 3 concentrates on the String class and the String class methods that are tested on the AP\nCSA exam. Manipulating strings is a very common task in programming and students will learn\nmany of the most common string manipulating algorithms. This unit also introduces iteration\nand the Java control structures that allow for the use of repetition in programs.\nThe Big Ideas covered in this unit are Modularity, Variables, and Control. These are the\nEnduring Understandings covered in this unit:\n• MOD-1: Some objects or concepts are so frequently represented that programmers can\ndraw upon existing code that has already been tested, enabling them to write solutions\nmore quickly and with a greater degree of confidence.\n• VAR-1: To find specific solutions to generalizable problems, programmers include\nvariables in their code so that the same algorithm runs using different input values.\n• CON-2: Programmers incorporate iteration and selection into code as a way of providing\ninstructions for the computer to process each of the many possible input values.\nThese are the Computational Thinking Skills addressed:\n• 1.B Determine code that would be used to complete code segments.\n• 1.C Determine code that would be used to interact with completed program code.\n• 2.A Apply the meaning of specific operators.\n• 2.B Determine the result or output based on statement execution order in a code\nsegment without method calls (other than output).\n• 2.C Determine the result or output based on the statement execution order in a code\nsegment containing method calls.\n• 3.A Write program code to create objects of a class and call methods.\n• 3.C Write program code to satisfy method specifications using expressions, conditional\nstatements, and iterative statements.\n• 4.C Determine if two or more code segments yield equivalent results.\n• 5.A Describe the behavior of a given segment of program code.\n• 5.C Explain how the result of program code changes, given a change of the initial code.\nUnit 3 Topics\nOur Unit 3 covers the College Board Unit 4 and a review of Strings. Over the course of this unit\nand the unit project, the following topics will be covered and teachers may use these in the AP\nClassroom to filter questions for formative and summative assessments:\n• 2.6 String Objects: Concatenation, Literals, and More\n• 2.7 String Methods\nBack to Table of Contents 17",
        "UTeach CS A\nCourse Syllabus and Planning Guide\n• 4.1 while Loops\n• 4.2 for Loops\n• 4.3 Developing Algorithms using Strings\n• 4.4 Nested Iteration\n• 4.5 Informal Code Analysis\nUnit 3 Schedule (19 Days)\nDay Topic Lessons Learning Objectives Essential Knowledge\nLanguage Interpreter Project\nU3D1 Unit Project None None\n(1 of 6)\nInstantiation, Literals, and VAR-1.A.1, VAR-1.E.1, VAR-\nU3D2\nMore 1.E.2, VAR-1.E.3, VAR-1.E.4,\nVAR-1.E.5, VAR-1.E.6, VAR-\nStrings VAR-1.A, VAR-1.E, MOD-1.G\n1.E.7, VAR-1.E.8, VAR-1.E.9,\nU3D3-\nString Methods VAR-1.E.10, VAR-1.E.11, VAR-\nD4 1.E.12, VAR-1.E.13, MOD-1.G.1\nLanguage Interpreter Project VAR-1.E.1, VAR-1.E.3, VAR-\nU3D5 Unit Project VAR-1.E, MOD-1.G 1.E.10, VAR-1.E.11, VAR-1.E.12,\n(2 of 6)\nMOD-1.G.1\nCON-2.D.1, CON-2.E.1, CON-\nU3D6 For Loops CON-2.D, CON-2.E\n2.E.2, CON-2.E.3, CON-2.E.5\nCON-2.C.1, CON-2.C.2, CON-\nU3D7- 2.C.3, CON-2.D.4, CON-2.D.5,\nIteration While Loops CON-2.C, CON-2.D, CON-2.E\nD8 CON-2.D.1, CON-2.D.2, CON-\n2.E.4\nU3D9-\nNested Iteration CON-2.G CON-2.G.1, CON-2.G.2\nD10\nLanguage Interpreter Project VAR-1.E.1, VAR-1.E.3, VAR-\nU3D11 Unit Project VAR-1.E, MOD-1.G 1.E.10, VAR-1.E.11, VAR-1.E.12,\n(3 of 6)\nMOD-1.G.1\nU3D12 Developing Algorithms using\nAlgorithms CON-2.F, CON-2.H CON-2.F.1, CON-2.H.1\n-D14 Strings\nVAR-1.E.1, VAR-1.E.3, VAR-\nU3D15 Language Interpreter Project\nUnit Project VAR-1.E, MOD-1.G 1.E.10, VAR-1.E.11, VAR-1.E.12,\n-D16 (4-5 of 6)\nMOD-1.G.1\nUnit Test\nU3D17 Unit 3 Test Review None None\nReview\nU3D18 Unit Test Unit 3 Test None None\nLanguage Interpreter\nU3D19 Unit Project None None\nPresentation (6 of 6)\nBack to Table of Contents 18",
        "UTeach CS A\nCourse Syllabus and Planning Guide\nUnit 4: Object, Classes and Methods\nUnit 4 takes a deep dive into Object-Oriented Programming by introducing all the components\nof a class including private instance variables, constructors, accessor methods, mutator\nmethods, and helper methods. This unit also covers private vs public access to data and\nmethods, the different categories of methods from static and non-static to void and non-void.\nWithin the unit, students will create entire classes and then instantiate objects of that class.\nThe Big Ideas covered in this unit are Modularity, Variables, and Impact of Computing. These\nare the Enduring Understandings covered in this unit:\n• MOD-1: Some objects or concepts are so frequently represented that programmers can\ndraw upon existing code that has already been tested, enabling them to write solutions\nmore quickly and with a greater degree of confidence.\n• MOD 2: Programmers use code to represent a physical object or nonphysical concept,\nreal or imagined, by defining a class based on the attributes and/or behaviors of the\nobject or concept.\n• MOD-3: When multiple classes contain common attributes and behaviors, programmers\ncreate a new class containing the shared attributes and behaviors forming a hierarchy.\nModifications made at the highest level of the hierarchy apply to the subclasses.\n• VAR-1: To find specific solutions to generalizable problems, programmers include\nvariables in their code so that the same algorithm runs using different input values.\n• IOC-1: While programs are typically designed to achieve a specific purpose, they may\nhave unintended consequences.\nThese are the Computational Thinking Skills addressed:\n• 1.A Determine an appropriate program design to solve a problem or accomplish a task.\n• 1.B Determine code that would be used to complete code segments.\n• 1.C Determine code that would be used to interact with completed program code.\n• 2.C Determine the result or output based on the statement execution order in a code\nsegment containing method calls.\n• 3.B Write program code to define a new type by creating a class.\n• 4.B Identify errors in program code.\n• 5.A Describe the behavior of a given segment of program code.\n• 5.B Explain why a code segment will not compile or work as intended.\n• 5.D Describe the initial conditions that must be met for a program segment to work as\nintended or described.\nBack to Table of Contents 19",
        "UTeach CS A\nCourse Syllabus and Planning Guide\nUnit 4 Topics\nOur Unit 4 covers the College Board Unit 5. Over the course of this unit and the unit project, the\nfollowing topics will be covered and teachers may use these in the AP Classroom to filter\nquestions for formative and summative assessments:\n• 5.1 Anatomy of a Class\n• 5.2 Constructors\n• 5.3 Documentation with Comments\n• 5.4 Accessor Methods\n• 5.5 Mutator Methods\n• 5.6 Writing Methods\n• 5.7 Static Variables and Methods\n• 5.8 Scope and Access\n• 5.9 this Keyword\n• 5.10 Ethical and Social Implications of Computing Systems\nUnit 4 Schedule (21 Days)\nDay Topic Lessons Learning Objectives Essential Knowledge\nDisease Diagnoser Project (1\nU4D1 Unit Project None None\nof 6)\nMOD-1.B.1, MOD-1.B.2, MOD-\n2.D.1, MOD-2.D.2, MOD-2.D.3,\nMOD-2.D.4, MOD-2.D.5, MOD-\n2.D.6, MOD-2.D.7, MOD-2.E.1,\nU4D2- Object-Oriented MOD-1.B, MOD-2.D, MOD-2.E, MOD-2.E.2, MOD-2.F.1, MOD-\nMOD-2.F, MOD-3.A, VAR-1.G, 2.F.2, MOD-2.F.3, MOD-2.F.4,\nD3 Programming\nIOC-1.A MOD-2.F.5, MOD-2.F.6, MOD-\n3.A.1, MOD-3.A.2, MOD-3.A.3,\nMOD-3.A.4, VAR-1.G.1, VAR-\n1.G.2, VAR-1.G.3, VAR-1.G.4,\nIOC-1.A.1\nMOD-3.E.1, MOD-3.E.2, MOD-\nU4D4 The Object Superclass MOD-3.E\n3.E.3, MOD-3.E.4\nObjects\nMOD-2.B.1, MOD-2.B.2, MOD-\n2.B.3, MOD-2.B.4, MOD-2.C.1,\nMOD-2.C.2, MOD-2.C.3, MOD-\n2.C.4, MOD-2.C.5, MOD-2.D.1,\nU4D5- MOD-2.B, MOD-2.C, MOD-2.D, MOD-2.D.2, MOD-2.D.3, MOD-\nWriting Classes\nD6 MOD-2.E, MOD-2.F 2.D.4, MOD-2.D.5, MOD-2.D.6,\nMOD-2.D.7, MOD-2.E.1, MOD-\n2.E.2, MOD-2.F.1, MOD-2.F.2,\nMOD-2.F.3, MOD-2.F.4, MOD-\n2.F.5, MOD-2.F.6\nMOD-2.B.1, MOD-2.B.2, MOD-\nU4D7 Creating Instances of Classes MOD-2.B\n2.B.3, MOD-2.B.4, MOD-2.B.5\nU4D8 Accessibility (private/public) MOD-2.A, MOD-3.A MOD-2.A.1, MOD-2.A.2, MOD-\nBack to Table of Contents 20",
        "UTeach CS A\nCourse Syllabus and Planning Guide\n2.A.3, MOD-2.A.4, MOD-2.A.5,\nMOD-2.A.6, MOD-3.A.1, MOD-\n2.A.2, MOD-3.A.3, MOD-3.A.4\nMOD-1.H.1, MOD-2.G.1, MOD-\n2.G.2, MOD-2.G.3, MOD-2.G.4,\nU4D9 Static Variables and Methods MOD-1.H, MOD-2.G, MOD-2.H\nMOD-2.G.5, MOD-2.H.1, MOD-\n2.H.2, MOD-2.H.3\nVAR-1.G.1, VAR-1.G.2, VAR-\nU4D10 this and super VAR.1.G, VAR.1.H 1.G.3, VAR-1.G.4, VAR-1.H.1,\nVAR-1.H.2\nMOD-2.A.1, MOD-2.A.2, MOD-\n2.A.3, MOD-2.A.4, MOD-2.A.5,\nMOD-2.A.6, MOD-2.B.1, MOD-\n2.B.2, MOD-2.B.3, MOD-2.B.5,\nMOD-2.D.1, MOD-2.D.2, MOD-\nU4D11\nUnit Project\nLanguage Interpreter Project M MO OD D- -2 2. .A E,, MM OO DD -- 22 .. FB ,, MM OO DD -- 32 .. AD ,, 2.D.3, MOD-2.D.4, MOD-2.D.5,\n-D12 (2-3 of 6) MOD-2.D.6, MOD-2.D.7, MOD-\nVAR-1.G, VAR-1.H\n2.E.1, MOD-2.E.2, MOD-2.F.1,\nMOD-2.F.2, MOD-2.F.4, MOD-\n3.A.3, MOD-3.A.4, VAR-1.G.1,\nVAR-1.G.2, VAR-1.G.3, VAR-\n1.H.1\nMOD-1.E.1, MOD-1.E.2, MOD-\n1.E.3, MOD-1.E.4, MOD-1.E.5,\nU4D13 Void Methods MOD-1.E, MOD-2.E\nMOD-1.E.6, MOD-1.E.7, MOD-\n2.E.1\nMethods\nMOD-1.G.1, MOD-2.D.2, MOD-\n2.D.3, MOD-2.D.4, MOD-2.D.5,\nU4D14 Non-Void Methods MOD.1.G, MOD-2.D, MOD-2.F\nMOD-2.F.1, MOD-2.F.2, MOD-\n2.F.3, MOD-2.F.4\nMOD-2.A.1, MOD-2.A.2, MOD-\n2.A.3, MOD-2.A.4, MOD-2.A.5,\nMOD-2.A.6, MOD-2.B.1, MOD-\n2.B.2, MOD-2.B.3, MOD-2.B.5,\nMOD-2.D.1, MOD-2.D.2, MOD-\nDisease Diagnoser Project (4 MOD-2.A, MOD-2.B, MOD-2.D, 2.D.3, MOD-2.D.4, MOD-2.D.5,\nU4D15 Unit Project MOD-2.E, MOD-2.F, MOD-3.A,\nof 6) MOD-2.D.6, MOD-2.D.7, MOD-\nVAR-1.G, VAR-1.H\n2.E.1, MOD-2.E.2, MOD-2.F.1,\nMOD-2.F.2, MOD-2.F.4, MOD-\n3.A.3, MOD-3.A.4, VAR-1.G.1,\nVAR-1.G.2, VAR-1.G.3, VAR-\n1.H.1\nU4D16 Overloaded\nOverloaded Methods MOD-1.C, MOD-1.F MOD-1.C.4, MOD-1.F.3\n-17 Methods\nMOD-2.A.1, MOD-2.A.2, MOD-\n2.A.3, MOD-2.A.4, MOD-2.A.5,\nMOD-2.A.6, MOD-2.B.1, MOD-\n2.B.2, MOD-2.B.3, MOD-2.B.5,\nDisease Diagnoser Project (5 MOD-2.A, MOD-2.B, MOD-2.D, MOD-2.D.1, MOD-2.D.2, MOD-\nU4D18 Unit Project MOD-2.E, MOD-2.F, MOD-3.A, 2.D.3, MOD-2.D.4, MOD-2.D.5,\nof 6)\nVAR-1.G, VAR-1.H MOD-2.D.6, MOD-2.D.7, MOD-\n2.E.1, MOD-2.E.2, MOD-2.F.1,\nMOD-2.F.2, MOD-2.F.4, MOD-\n3.A.3, MOD-3.A.4, VAR-1.G.1,\nVAR-1.G.2, VAR-1.G.3, VAR-\nBack to Table of Contents 21",
        "UTeach CS A\nCourse Syllabus and Planning Guide\n1.H.1\nUnit Test\nU4D19 Unit 4 Test Review None None\nReview\nU4D20 Unit Test Unit 4 Test None None\nDisease Diagnoser\nU4D21 Unit Project None None\nPresentation (6 of 6)\nBack to Table of Contents 22",
        "UTeach CS A\nCourse Syllabus and Planning Guide\nUnit 5: Arrays, ArrayLists, and 2D Arrays\nUnit 5 focuses on three different data structures used to store data in Java: the array, ArrayList,\nand 2D array. Arrays are static, one-dimensional data structures. ArrayList is a built-in Java class\nthat stores data in a dynamic list and 2D arrays store data in a two-dimensional structure like a\ntable or spreadsheet. Topics include the syntax for creation and access and traversal methods\nfor each data structure and the most common algorithms for processing data.\nThe Big Ideas covered in this unit are Variables, Control, and Impact of Computing. These are\nthe Enduring Understandings covered in this unit:\n• MOD-1: Some objects or concepts are so frequently represented that programmers can\ndraw upon existing code that has already been tested, enabling them to write solutions\nmore quickly and with a greater degree of confidence.\n• MOD 2: Programmers use code to represent a physical object or nonphysical concept,\nreal or imagined, by defining a class based on the attributes and/or behaviors of the\nobject or concept.\n• MOD-3: When multiple classes contain common attributes and behaviors, programmers\ncreate a new class containing the shared attributes and behaviors forming a hierarchy.\nModifications made at the highest level of the hierarchy apply to the subclasses.\n• VAR-1: To find specific solutions to generalizable problems, programmers include\nvariables in their code so that the same algorithm runs using different input values.\n• VAR-2: To manage large amounts of data or complex relationships in data, programmers\nwrite code that groups the data together into a single data structure without creating\nindividual variables for each value.\n• CON-2: Programmers incorporate iteration and selection into code as a way of providing\ninstructions for the computer to process each of the many possible input values.\n• IOC-1: While programs are typically designed to achieve a specific purpose, they may\nhave unintended consequences.\nThese are the Computational Thinking Skills addressed:\n• 1.B Determine code that would be used to complete code segments.\n• 1.C Determine code that would be used to interact with completed program code.\n• 2.B Determine the result or output based on statement execution order in a code\nsegment without method calls (other than output).\n• 2.C Determine the result or output based on the statement execution order in a code\nsegment containing method calls.\n• 3.D Write program code to create, traverse, and manipulate elements in 1D array or\nArrayList objects.\nBack to Table of Contents 23",
        "UTeach CS A\nCourse Syllabus and Planning Guide\n• 3.E Write program code to create, traverse, and manipulate elements in 2D array\nobjects.\n• 4.A Use test-cases to find errors in program code.\n• 4.B Identify errors in program code.\n• 4.C Determine if two or more code segments yield equivalent results.\n• 5.D Describe the initial conditions that must be met for a program segment to work as\nintended or described.\nUnit 5 Topics\nOur Unit 5 covers the College Board Units 6, 7, and 8. Over the course of this unit and the unit\nproject, the following topics will be covered and teachers may use these in the AP Classroom to\nfilter questions for formative and summative assessments:\n• 6.1 Array Creation and Access\n• 6.2 Traversing Arrays\n• 6.3 Enhanced for Loop for Arrays\n• 6.4 Developing Algorithms using Arrays\n• 7.1 Introduction to ArrayList\n• 7.2 ArrayList Methods\n• 7.3 Traversing ArrayLists\n• 7.4 Developing Algorithms using ArrayLists\n• 7.7 Ethical Issues Around Data Collection\n• 8.1 2D Arrays\n• 8.2 Traversing 2D Arrays\nUnit 5 Schedule (22 Days)\nDay Topic Lessons Learning Objectives Essential Knowledge\nAir Quality Analyzer Project\nU5D1 Unit Project None None\n(1 of 6)\nIOC-1.B.1, IOC-1.B.2, VAR-2.A.1,\nU5D2- VAR-2.A.2, VAR-2.A.3, VAR-\nArray Creation and Access IOC-1.B, VAR-2.A\nD3 2.A.4, VAR-2.A.5, VAR-2.A.6,\nVAR-2.A.7\nU5D4 Traversing Arrays VAR-2.B VAR-2.B.1, VAR-2.B.2, VAR-2.B.3\nArrays\nVAR-2.C.1, VAR-2.C.2, VAR-\nU5D5 Enhanced For Loop for Arrays VAR-2.C\n2.C.3, VAR-2.C.4\nU5D6- Developing Algorithms Using\nCON-2.I CON-2.I.1, CON-2-I.2\nD7 Arrays\nAir Quality Analyzer Project VAR-2.A, VAR-2.B, VAR-2.C, VAR-2.A.1, VAR-2.A.2, VAR-\nU5D8 Unit Project\n(2 of 6) CON-2.D, CON-2.I 2.A.3, VAR-2.A.4, VAR-2.A.5,\nBack to Table of Contents 24",
        "UTeach CS A\nCourse Syllabus and Planning Guide\nVAR-2.A.6, VAR-2.A.7, VAR-\n2.B.1, VAR-2.B.2, VAR-2.B.3,\nVAR-2.C.1, VAR-2.C.2, VAR-\n2.C.3, VAR-2.C.4, CON-2.D.2,\nCON-2.I.1, CON-2.I.2\nVAR-2.D.1, VAR-2.D.2, VAR-\nU5D9 Introduction to ArrayList VAR-2.D\n2.D.3, VAR-2.D.4, VAR-2.D.5\nU5D10\nArrayList Methods VAR-2.D VAR-2.D.6, VAR-2.D.7\n-D11\nWrapper Classes: Integer and VAR-1.F.1, VAR-1.F.2, VAR-1.F.3,\nU5D12 ArrayLists VAR-1.F VAR-1.F.4, VAR-1.F.5, VAR-1.F.6,\nDouble\nVAR-1.F.7\nVAR-2.E.1, VAR-2.E.2, VAR-\nU5D13 Traversing ArrayLists VAR-2.E\n2.E.3, VAR-2.E.4\nDeveloping Algorithms Using\nU5D14 CON-2.J CON-2.J.1, CON-2.J.2\nArrayLists\nVAR-1.F.1, VAR-1.F.2, VAR-1.F.3,\nVAR-1.F.4, VAR-1.F.5, VAR-1.F.6,\nVAR-1.F.7, VAR-2.D.1, VAR-\nAir Quality Analyzer Project VAR-1.F, VAR-2.D, VAR-2.E, 2.D.2, VAR-2.D.3, VAR-2.D.4,\nU5D15 Unit Project\n(3 of 6) CON-2.J VAR-2.D.5, VAR-2.D.6, VAR-\n2.D.7, VAR-2.E.1, VAR-2.E.2,\nVAR-2.E.3, VAR-2.E.4, CON-\n2.J.1, CON-2.J.2\nVAR-2.F.1, VAR-2.F.2, VAR-2.F.3,\nVAR-2.F.4, VAR-2.F.5, VAR-\nU5D16 2D Arrays VAR-2.F, VAR-2.G, CON-2.N\n2.G.1, VAR-2.G.2, VAR-2.G.3,\nCON-2.N.2\n2D Arrays\nVAR-2.F.1, VAR-2.F.2, VAR-2.F.3,\nVAR-2.F.4, VAR-2.F.5, VAR-\nU5D17 Traversing 2D Arrays VAR-2.F, VAR-2.G, CON-2.N\n2.G.1, VAR-2.G.2, VAR-2.G.3,\nCON-2.N.2\nUnit Test\nU5D18 Unit 5 Test Review None None\nReview\nVAR-2.F.1, VAR-2.F.2, VAR-2.F.3,\nU5D19 Air Quality Analyzer Project VAR-2.F.4, VAR-2.F.5, VAR-\nUnit Project VAR-2.F, VAR-2.G, CON-2.N\n-D20 (4-5 of 6) 2.G.1, VAR-2.G.2, VAR-2.G.3,\nCON-2.N.2\nU5D21 Unit Test Unit 5 Test None None\nAir Quality Analyzer\nU5D22 Unit Project None None\nPresentation (6 of 6)\nBack to Table of Contents 25",
        "UTeach CS A\nCourse Syllabus and Planning Guide\nUnit 6: Inheritance\nUnit 6 takes a comprehensive look at two relationships between classes in Java: inheritance and\ncomposition. Class interaction is a fundamental concept of OOP - building a new class from an\nexisting class or using features of one class in another class leads to reliability and reliability is\nthe main goal of OOP. Topics covered in depth are superclasses and subclasses, constructors of\nthe subclasses, overriding methods, composition, the Object class, and polymorphism.\nThe Big Idea covered in this unit is Modularity. These are the Enduring Understandings covered\nin this unit:\n• MOD 2: Programmers use code to represent a physical object or nonphysical concept,\nreal or imagined, by defining a class based on the attributes and/or behaviors of the\nobject or concept.\n• MOD-3: When multiple classes contain common attributes and behaviors, programmers\ncreate a new class containing the shared attributes and behaviors forming a hierarchy.\nModifications made at the highest level of the hierarchy apply to the subclasses.\nThese are the Computational Thinking Skills addressed:\n• 1.A Determine an appropriate program design to solve a problem or accomplish a task.\n• 1.C Determine code that would be used to interact with completed program code.\n• 3.A Write program code to create objects of a class and call methods.\n• 3.B Write program code to define a new type by creating a class.\n• 5.A Describe the behavior of a given segment of program code.\n• 5.B Explain why a code segment will not compile or work as intended.\n• 5.D Describe the initial conditions that must be met for a program segment to work as\nintended or described.\nUnit 6 Topics\nOur Unit 6 covers the College Board Unit 9. Over the course of this unit and the unit project, the\nfollowing topics will be covered and teachers may use these in the AP Classroom to filter\nquestions for formative and summative assessments:\n• 9.1 Creating Superclasses and Subclasses\n• 9.2 Writing Constructors for Subclasses\n• 9.3 Overriding Methods\n• 9.4 super Keyword\n• 9.5 Creating References using Inheritance Hierarchies\n• 9.6 Polymorphism\n• 9.7 Object Superclass\nBack to Table of Contents 26",
        "UTeach CS A\nCourse Syllabus and Planning Guide\nUnit 6 Schedule (19 Days)\nDay Topic Lessons Learning Objectives Essential Knowledge\nHospital Locator Project (1 of\nU6D1 Unit Project None None\n6)\nU6D2- MOD-3.B.1, MOD-3.B.2, MOD-\nClass Hierarchies MOD-3.B, MOD-3.E\nD3 3.E.3, MOD-3.E.4\nMOD-3.B.1, MOD-3.B.2, MOD-\nU6D4 Extending Classes MOD-3.B 3.B.4, MOD-3.B.11, MOD-\n3.B.12, MOD-3.B.13\nCreating\nSuperclasses The “is-a” Inheritance\nU6D5 MOD-3.B MOD-3.B.3\nand Subclasses Relationship\nThe “has-a” Composition\nU6D6 MOD-2.B MOD-2.B.1\nRelationship\nMOD-3.B.10, MOD-3.B.11,\nU6D7 Overriding Methods MOD-3.B MOD-3.B.12, MOD-3.B.13,\nMOD-3.B.14, MOD-3.B.15\nMOD-3.B.1, MOD-3.B.2, MOD-\n3.B.3, MOD-3.B.4, MOD-3.B.10,\nHospital Locator Project (2 of MOD-3.B.11, MOD-3.B.12,\nU6D8 Unit Project MOD-3.B, MOD-3.E\n6) MOD-3.B.13, MOD-3.B.14,\nMOD-3.B.15, MOD-3.E.3, MOD-\n3.E.4\nU6D9- Writing Constructors for MOD-3.B.5, MOD-3.B.6, MOD-\nConstructors MOD-3.B 3.B.7, MOD-3.B.8, MOD-3.B.9,\nD10 Subclasses\nMOD-3.B.14, MOD-3.B.15\nReference vs Declaring Objects of Parent MOD-3.C.1, MOD-3.C.2, MOD-\nU6D11 MOD-3.C\nObject Type Type 3.C.3, MOD-3.C.4\nMOD-3.B.1, MOD-3.B.2, MOD-\n3.B.3, MOD-3.B.4, MOD-3.B.5,\nMOD-3.B.6, MOD-3.B.7, MOD-\nHospital Locator Project (3 of 3.B.8, MOD-3.B.9, MOD-3.B.10,\nU6D12 Unit Project MOD-3.B, MOD-3.C, MOD-3.E MOD-3.B.11, MOD-3.B.12,\n6)\nMOD-3.B.13, MOD-3.B.14,\nMOD-3.B.15, MOD-3.C.1, MOD-\n3.C.2, MOD-3.C.3, MOD-3.C.4,\nMOD-3.E.3, MOD-3.E.4\nU6D13 MOD-3.D.1, MOD-3.D.2, MOD-\nPolymorphism Polymorphism MOD-3.D\n-D14 3.D.3\nMOD-3.B.1, MOD-3.B.2, MOD-\n3.B.3, MOD-3.B.4, MOD-3.B.5,\nHospital Locator Project (4 of MOD-3.B, MOD-3.C, MOD-3.D, MOD-3.B.6, MOD-3.B.7, MOD-\nU6D15 Unit Project 3.B.8, MOD-3.B.9, MOD-3.B.10,\n6) MOD-3.E\nMOD-3.B.11, MOD-3.B.12,\nMOD-3.B.13, MOD-3.B.14,\nMOD-3.B.15, MOD-3.C.1, MOD-\nBack to Table of Contents 27",
        "UTeach CS A\nCourse Syllabus and Planning Guide\n3.C.2, MOD-3.C.3, MOD-3.C.4,\nMOD-3.D.1, MOD-3.D.2, MOD-\n3.D.3, MOD-3.E.3, MOD-3.E.4\nUnit Test\nU6D16 Unit 6 Test Review None None\nReview\nMOD-3.B.1, MOD-3.B.2, MOD-\n3.B.3, MOD-3.B.4, MOD-3.B.5,\nMOD-3.B.6, MOD-3.B.7, MOD-\n3.B.8, MOD-3.B.9, MOD-3.B.10,\nHospital Locator Project (5 of MOD-3.B, MOD-3.C, MOD-3.D, MOD-3.B.11, MOD-3.B.12,\nU6D17 Unit Project\n6) MOD-3.E MOD-3.B.13, MOD-3.B.14,\nMOD-3.B.15, MOD-3.C.1, MOD-\n3.C.2, MOD-3.C.3, MOD-3.C.4,\nMOD-3.D.1, MOD-3.D.2, MOD-\n3.D.3, MOD-3.E.3, MOD-3.E.4\nU6D18 Unit Test Unit 6 Test None None\nHospital Locator Presentation\nU6D19 Unit Project None None\n(6 of 6)\nBack to Table of Contents 28",
        "UTeach CS A\nCourse Syllabus and Planning Guide\nUnit 7: Searching, Sorting, and Recursion\nUnit 7 covers different search algorithms, the selection sort and insertion sort, Big O, recursion,\nrecursive search and sort algorithms.\nThe Big Idea of Control is covered in Unit 7. These are the Enduring Understandings covered in\nthis unit:\n• CON 2: Programmers incorporate iteration and selection into code as a way of providing\ninstructions for the computer to process each of the many possible input values.\nThese are the Computational Thinking Skills addressed:\n• 1.B Determine code that would be used to complete code segments.\n• 2.C Determine the result or output based on the statement execution order in a code\nsegment containing method calls.\n• 2.D Determine the number of times a code segment will execute.\n• 3.D Write program code to create, traverse and manipulate elements in 1D array or\nArrayList objects.\n• 5.A Describe the behavior of a given segment of program code.\n• 5.C Explain how the result of program code changes, given a change of the initial code.\nUnit 7 Topics\nOur Unit 7 covers the College Board Unit 10 and the searching and sorting topics from Unit 7.\nOver the course of this unit and the unit project, the following topics will be covered and\nteachers may use these in the AP Classroom to filter questions for formative and summative\nassessments:\n• 7.5 Searching\n• 7.6 Sorting\n• 10.1 Recursion\n• 10.2 Recursive Searching and Sorting\nBack to Table of Contents 29",
        "UTeach CS A\nCourse Syllabus and Planning Guide\nUnit 7 Schedule (20 Days)\nDay Topic Lessons Learning Objectives Essential Knowledge\nU7D1 Unit Project Data Decoder Project (1 of 6) None None\nSequential and Iterative CON-2.K.1, CON-2.K.2, CON-\nU7D2 Searching CON-2.K, CON-2.N\nBinary Search 2.N.1\nU7D3 Selection Sort CON-2.L, CON-2.M CON-2.L.1, CON-2.M.1\nU7D4 Iterative Sorts Insertion Sort CON-2.L, CON-2.M CON.2.L.1, CON-2.M.1\nU7D5-\nCreate Your Own Sort CON-2.L, CON-2.M CON.2.L.1, CON-2.M.1\nD6\nU7D7- Data Decoder Project (2-3 of CON-2.K.1, CON-2.K.2, CON-\nUnit Project CON-2.K, CON-2.L, CON-2.M\nD8 6) 2.L.1, CON-2.M.1\nInformal\nU7D9 Compare Big O Informally CON-2.H, CON-2.M CON-2.H.1, CON-2.M.1\nAnalysis\nCON-2.H, CON-2.K, CON-2.L, CON-2.H.1, CON-2.K.1, CON-\nU7D10 Unit Project Data Decoder Project (4 of 6)\nCON-2.M 2.K.2, CON-2.L.1, CON-2.M.1\nU7D11 Recursion Defined\nCON-2.O.1, CON-2.O.2, CON-\nU7D12 Recursion Recursive Methods CON-2.O 2.O.3, CON-2.O.4, CON-2.O.5,\nCON-2.O.6\nU7D13 Recursive Traversal Methods\nCON-2.P.1, CON-2.P.2, CON-\nU7D14 Binary Search CON-2.P\nRecursive 2.P.3, CON-2.P.4\nSearching and\nU7D15 Sorting Merge Sort CON-2.Q CON-2.Q.1\n-D16\nData Decoder Project CON-2.H, CON-2.M, CON-2.P, CON-2.H.1, CON-2.M.1, CON-\nU7DOP Unit Project 2.P.1, CON-2.P.2, CON-2.P.3,\n(Optional) CON-2.Q\nCON-2.P.4, CON-2.Q.1\nUnit Test\nU7D17 Unit 7 Test Review None None\nReview\nU7D18 Unit Project Data Decoder Project (5 of 6) None None\nU7D19 Unit Test Unit 7 Test None None\nData Decoder Presentation (6\nU7D20 Unit Project None None\nof 6)\nBack to Table of Contents 30",
        "UTeach CS A\nCourse Syllabus and Planning Guide\nPedagogical Approaches\nThe UTeach AP Computer Science A curriculum uses Project-Based Learning (PBL) and Culturally\nResponsive Teaching (CRT) in order to better engage students in the learning process. By\nencouraging students to use critical thinking skills and challenging them to solve authentic and\nmeaningful problems, PBL helps students to develop a deeper and more profound\nunderstanding of the power of computation in our everyday lives. Built using a student-centric\napproach, the curriculum leverages many important components of CRT including learning\nwithin the context of culture, encouraging the teacher to be a facilitator of learning, and\nmediating instruction within the culture. Teachers who are unfamiliar with the goals, methods,\nand techniques of PBL can learn more at the Buck Institute for Education website. Likewise,\nmore information about CRT can be found at the Education Alliance website.\nIn teaching this course, educators are encouraged to use the range of PBL and CRT techniques\nthat have been incorporated into each unit, including narrative anchoring videos, overarching\nunit projects, clear rubrics, regular benchmarks, scaffolding activities, final products, and\nreflection. Used together in a coherent, unified manner that actively engages students in the\neducational process, PBL and CRT strategies can improve comprehension and retention and\nhelp students develop stronger problem solving, critical thinking, and group communication\nskills.\nInstructional Sequencing\nThe year-long course consists of seven instructional units (each approximately lasting four\nweeks) that have been carefully structured to guide students through an introduction to the\nJava programming language and the study of object-oriented programming, a style of\nprogramming that uses classes and objects mimicking the organization of the real world. The\ntopics are sequenced so that each new unit builds on knowledge and skills from previous units,\nwith a goal to prepare students to successfully complete the College Board AP Computer\nScience A exam in the spring.\nIntroduction\nThe first module of each instructional unit opens with an anchor video designed to introduce\nthe driving questions, unit project, and key topics for the next few weeks of study. Students are\nexpected to participate in small-group and/or whole-class discussion to identify areas of focus\nthat will direct and drive learning throughout the unit.\nTopic Lessons/Activities\nDistributed throughout each unit, individual lessons, daily activities, programming assignments,\nand discussions will allow students to explore and practice applying relevant skills and concepts\nin greater detail.\nBack to Table of Contents 31",
        "UTeach CS A\nCourse Syllabus and Planning Guide\nProject Work Days\nEach of the projects has five or six dedicated work periods throughout each unit for students to\nwork on the programming aspect of the project. Project work days are not consecutive but\ninstead are spread throughout the unit, strategically placed after relevant topics have been\npresented.\nAssessments\nIn addition to informal, formative assessments throughout each unit, student learning and\nprogress is also assessed at the end of each unit through a formal, summative assessment and\nevaluation of their independent and collaborative efforts on the unit project.\nFormal assessments are modeled after the single-select multiple-choice questions and free\nresponse questions on the AP Computer Science A exam so that students can familiarize\nthemselves with the scope, style, and timing of questions that they can expect to see on the AP\nexam in the spring.\nUnit Projects\nThe course is narrative-driven, with students following a diverse cast of characters who travel\nacross the globe and solve real-world problems along the way. Students will come to know and\nlove a cast of four main characters, Vee, Hinni, Ed, and Antonio who take them on an adventure\naround the world. Hinni, Ed, and Antonio are helping Vee search for her mother who is\nstationed at the McMurdo Station, a research facility in Antarctica, when disaster strikes. As the\ngroup of friends fly to each continent on their search, they take time out to help people along\nthe way solving problems using their computational thinking skills. The students in the\nclassroom are actively involved with the characters as they represent a technical team of\ncomputer programmers who lend a helping hand in creating effective solutions to the authentic\nproblems the group faces.\nThe opening module of each unit serves as a formal launch of the unit project, an overarching,\nproduct-oriented challenge for students to investigate, research, and solve over the course of\nthe unit. The project launch starts with an anchor video that introduces the fundamental\nproblem or challenge to be solved and is intended to spark the students' imaginations and\ninspire them to find a solution. Projects are designed to be collaborative with students working\ntogether in groups and using the pair programming instructional strategy. These project work\ndays, along with smaller daily programming assignments, exceed the College Board Curricular\nRequirement 9, requiring students to spend at 20 hours in hands-on lab experiences [CR-9].\nBack to Table of Contents 32",
        "UTeach CS A\nCourse Syllabus and Planning Guide\nUnit Projects [CR-9]\nUnit 1: Avatar Creator Project\nStudents design unique, personal avatars, using the Python with Turtle programming language, in\norder to represent themselves as a member of the technical team assisting the cast of characters in\nthe course narrative.\nUnit 2: Resource Finder Project\nStudents create a program using conditional statements to read and analyze data from different\nrock samples in order to identify an ideal area to rebuild a science research station in Antarctica.\nUnit 3: Language Interpreter Project\nStudents create a language interpreter program that collects a speech sample of an unknown\nindigenous language in South America, then uses iteration and String class methods to translate the\nnew language into English.\nUnit 4: Disease Diagnoser Project\nStudents will design a program using classes and methods in order to diagnose different diseases\nbased on patient symptoms in a clinic in South Africa.\nUnit 5: Air Quality Analyzer Project\nStudents write a program to store and analyze air quality data from cities in Sri Lanka using arrays,\nArrayLists, and 2D arrays. After completing their analysis, students compare the use of the different\ndata structures and decide if their program is scalable for a larger data set.\nUnit 6: Hospital Locator Project\nStudents reconstruct a compromised database of hospitals in Australia using superclass and subclass\nstructures. Students will then use a clue to search for a specific hospital.\nUnit 7: Data Decoder Project\nStudents write a program that uses searching and sorting algorithms to analyze climate change data.\nThey must optimize the algorithms for greater efficiency in order to create a presentation for the\nWorld Meteorological Organization in Switzerland.\nRubrics\nEach unit project is accompanied by a clearly defined rubric that specifies the set of\nexpectations for student work throughout the unit, including an exhaustive list of assessment\ncriteria for the artifacts that students will produce and detailed descriptors for each\nperformance level that a student might demonstrate. Teachers should provide students with\nthe rubric at the start of the unit as part of the initial discussion immediately following the\nanchor video. Giving the students the rubric at the time of the project launch is critical for\nsetting clear student expectations early in the research and learning process. Over the course of\nBack to Table of Contents 33",
        "UTeach CS A\nCourse Syllabus and Planning Guide\nthe unit, teachers should regularly refer back to the goals and criteria of the rubric in order to\nensure that students remain focused and on pace for meeting the stated requirements.\nBenchmarks\nEach unit provides the teacher with a number of benchmark activities, or subtasks, that feed\ninto the larger unit project. Each of these subtasks contributes directly to the final product that\nthe students will create. Teachers can use these benchmarks as intermediate, informal\nassessments to gauge the progress of each student and/or collaborative group in their mastery\nof the unit goals.\nScaffolding Activities\nThe bulk of each unit consists of a series of individual topic lessons, activities, discussions, and\nhands-on applications that allow the teacher to provide instruction, guidance, and support to\nstudents and collaborative groups as they design and implement the programming code for the\nunit project. These scaffolding activities serve to introduce, explain, and encourage the use of\nthe unit's core concepts and skills by providing students with structured opportunities and\nincentives to explore the material in greater depth.\nFinal Products and Student Portfolio\nAt the culmination of each unit, student groups are expected to present a final product that\nrepresents the body of their work and code implementation on the unit project. Students\ndemonstrate their mastery of the core content and skills for the unit by exhibiting the authentic\nand purposeful artifacts, in the form of working program code, that they have created. A key\ncomponent of the project always includes a public presentation of each student's work before\ntheir peers as a way of providing motivation for each student and holding them accountable for\ntheir own learning.\nReflections\nStudents will be required to submit their project to the teacher in the form of a Student\nSubmission Template which provides the teacher with a link to the student’s final program code\nalong with thoughtful responses to specific questions about the topics covered in the unit\nproject. This provides students an opportunity to reflect on the challenges and successes during\nthe course of the unit project.\nBack to Table of Contents 34",
        "UTeach CS A\nCourse Syllabus and Planning Guide\nResources and Technical Requirements\nUTeach AP Computer Science A does not require additional materials to be purchased for\nimplementation.\nWebsites to Whitelist\nThe following websites will be accessed throughout the duration of the course and should be\nsubmitted to the school IT department for whitelisting prior to beginning the course. We also\nrecommend testing access to different sites from your device as well as students’ devices to\nensure a smooth lesson.\nrepl.it, youtube.com, vimeo.com, apcentral.collegeboard.org, docs.oracle.com, docs.python.org,\ncodingbat.com, topsoccerblog.com, epa.gov, scijinks.gov, aqicn.org, wunderground.com,\nwikipedia.org, google.com/maps, cs.joensuu.fi/jeliot\nCourse Bibliography\nAlmossawi, A. (2014). An illustrated book of bad arguments. New York, NY: The Experiment.\nParlante, Nick. CodingBat Java, codingbat.com/java.\nTouretzky, D. S. (2013). Recursion. In COMMON LISP: A gentle introduction to symbolic\ncomputation (pp. 281-286). Mineola, NY: Dover Publications.\nWilliams, L. A., & Kessler, R. R. (2000). All I really need to know about pair programming I\nlearned in kindergarten. Communications of the ACM, 43(5), 108–114.\ndoi:10.1145/332833.332848.\nBack to Table of Contents 35"
    ],
    "skills": [
        "http://data.europa.eu/esco/skill/966f2fd3-3de6-42da-b87c-da924c6d7960",
        "http://data.europa.eu/esco/skill/78e33506-eecf-482f-a8c2-6b5d421f24cf",
        "http://data.europa.eu/esco/skill/080d918f-3781-4065-afe2-4eff9cbb636f",
        "http://data.europa.eu/esco/skill/5f5e9350-1d13-4391-b9e1-07f6b2047fc5",
        "http://data.europa.eu/esco/skill/db0e560b-15a7-4758-acca-088674461dff",
        "http://data.europa.eu/esco/skill/5bdb8e03-04ab-4869-a48f-3b013b5a2c3c",
        "http://data.europa.eu/esco/skill/9d1b08b3-ba1e-41f6-a466-1ac1e62eb5f0",
        "http://data.europa.eu/esco/skill/f8e5f1fd-82ee-45c0-b179-399d8e9a22aa",
        "http://data.europa.eu/esco/skill/33b55d3a-81f5-45cb-af40-06cd54db78e1",
        "http://data.europa.eu/esco/skill/2522a6ce-3202-4ac8-9f5b-b9cb5a3a83a1",
        "http://data.europa.eu/esco/skill/21fecc8a-392e-49ce-ac26-fb0696ccfead",
        "http://data.europa.eu/esco/skill/2b69525c-731c-4813-99a7-673fa5679d32",
        "http://data.europa.eu/esco/skill/385479b7-5da5-4367-9763-0d15b41bb65b",
        "http://data.europa.eu/esco/skill/fecf8a0d-62c4-4e71-9b03-0f4fc2ad7bf5",
        "http://data.europa.eu/esco/skill/489b2571-ce18-4944-b452-ed1f54e55b68",
        "http://data.europa.eu/esco/skill/234aeb8d-56c3-4531-9193-1c5e6a8d16cb",
        "http://data.europa.eu/esco/skill/0a30e5a8-60a8-4fda-9f89-8e9cee38da5a",
        "http://data.europa.eu/esco/skill/f77b73f0-8c65-4389-a3ae-3a57a73ad148",
        "http://data.europa.eu/esco/skill/91991706-cd8e-4795-9784-715fc0250c8d",
        "http://data.europa.eu/esco/skill/6d464155-f952-459e-92cd-308851f918f5",
        "http://data.europa.eu/esco/skill/2dfa5bd5-c87c-461c-bce9-69b2c58732bd",
        "http://data.europa.eu/esco/skill/f78877d1-99f3-4649-addc-2d09c9183a1e",
        "http://data.europa.eu/esco/skill/f9738fc9-4d67-43e8-bfda-954123e34d42",
        "http://data.europa.eu/esco/skill/45fc35a4-7530-4b94-9b56-1d485015fc7a",
        "http://data.europa.eu/esco/skill/87d0ccdb-3aa3-4af6-94e5-c7a04791c07e",
        "http://data.europa.eu/esco/skill/f245f8af-4412-4be0-8b51-78f355a86288",
        "http://data.europa.eu/esco/skill/0f2eee6f-2203-4cc8-9d79-854d2d5d8131",
        "http://data.europa.eu/esco/skill/699e7c26-6502-4e78-a823-3656ff5a5b8b",
        "http://data.europa.eu/esco/skill/23b45aa6-a479-486d-9e6f-062cbab7c68a",
        "http://data.europa.eu/esco/skill/d18527e9-68ee-4977-965d-84a366dce971",
        "http://data.europa.eu/esco/skill/b1daf957-3424-40e6-870c-d00d4317a45e",
        "http://data.europa.eu/esco/skill/45f1ae17-c20d-40fc-9307-7d33b6ca9213",
        "http://data.europa.eu/esco/skill/4c58528e-bdaa-43ad-8f5a-8ad0b8cd4bbb",
        "http://data.europa.eu/esco/skill/fce09eac-0b2d-4a50-bdcd-9dff4edfd9d0",
        "http://data.europa.eu/esco/skill/4339176e-3acd-4f7f-a5d9-445bee3d23f2",
        "http://data.europa.eu/esco/skill/0d6714c6-720e-4985-9791-5ab85d28da79",
        "http://data.europa.eu/esco/skill/c290c45c-b8da-4517-be4a-b16fdce26cb2",
        "http://data.europa.eu/esco/skill/f64fe2c2-d090-4e91-ba74-1355d96b9bca",
        "http://data.europa.eu/esco/skill/a117f32c-662b-4dd9-b739-1230dd04cb60",
        "http://data.europa.eu/esco/skill/b89f088d-82a9-4cf0-afe5-aade2f056b3f",
        "http://data.europa.eu/esco/skill/8deb6cb7-15e3-4fd7-a9eb-644c23de95fa",
        "http://data.europa.eu/esco/skill/6c80d53c-d8c9-41fe-998f-091fca208834",
        "http://data.europa.eu/esco/skill/edff6d20-660d-4d33-b412-9a5b664a14be",
        "http://data.europa.eu/esco/skill/7d10fcb2-b368-48ab-996b-7c9fafcf68ed",
        "http://data.europa.eu/esco/skill/21d2f96d-35f7-4e3f-9745-c533d2dd6e97",
        "http://data.europa.eu/esco/skill/9a4e91f4-67a4-45d3-b717-743b2c2ab733",
        "http://data.europa.eu/esco/skill/4f6e68b2-85c8-446e-a96d-b306ec7e0091",
        "http://data.europa.eu/esco/skill/5c003e77-867f-4213-b7e9-0a4671362646",
        "http://data.europa.eu/esco/skill/4c5d616e-f6d8-4fb4-8ce6-89a4b048b916",
        "http://data.europa.eu/esco/skill/294cf13e-4fdf-4cb8-bb6b-31b9da7f4819",
        "http://data.europa.eu/esco/skill/cf200547-25b5-47c8-9eda-bca4aedc13fb",
        "http://data.europa.eu/esco/skill/e54dc9c5-0f7f-4503-9776-efff47902602",
        "http://data.europa.eu/esco/skill/48391ec6-42ba-4093-acf4-c7673b0c07f4",
        "http://data.europa.eu/esco/skill/906d21c9-7a9c-4919-817d-10676f9ddfe4",
        "http://data.europa.eu/esco/skill/5ef0c719-5bcb-49f8-b8eb-824388225333",
        "http://data.europa.eu/esco/skill/05befef9-cb0b-410c-b5fc-f8a3c3598fca",
        "http://data.europa.eu/esco/skill/128f0b4c-8da7-467b-9196-7c691e067a1e",
        "http://data.europa.eu/esco/skill/5cede168-97f8-47a4-89fd-8f7188c55c5d",
        "http://data.europa.eu/esco/skill/811f3583-3956-477e-b4c8-e8c53eb44cc3",
        "http://data.europa.eu/esco/skill/dfb9cec6-3ae3-408a-9d57-c44361bf7aaf",
        "http://data.europa.eu/esco/skill/03ff0d53-573a-47a0-a0ad-1995815a4339",
        "http://data.europa.eu/esco/skill/fc54bd7f-0c03-4fdd-af8c-5eb4021e716d",
        "http://data.europa.eu/esco/skill/43ae58b9-5e56-4524-b45a-b422777a0576",
        "http://data.europa.eu/esco/skill/25e16679-a7d0-464d-916c-63210001bbab",
        "http://data.europa.eu/esco/skill/7ea3973c-87ea-4167-9e0f-c74f5aec26ec",
        "http://data.europa.eu/esco/skill/9983816d-cc78-4d3f-9e3c-c7baa9ebc77a",
        "http://data.europa.eu/esco/skill/ccd0a1d9-afda-43d9-b901-96344886e14d",
        "http://data.europa.eu/esco/skill/4a112f96-72c1-47f3-aa61-4b34ea415701",
        "http://data.europa.eu/esco/skill/a44c0ed6-68b1-457a-9c6d-ea8487bdfeb2",
        "http://data.europa.eu/esco/skill/1b8872bd-d869-4b08-b9b2-296d2b1c644c",
        "http://data.europa.eu/esco/skill/36065f25-3bbe-4a5c-a0fe-5623ad4b20df",
        "http://data.europa.eu/esco/skill/fd446407-b08e-49da-b8e3-7e7c79618c3f",
        "http://data.europa.eu/esco/skill/735a23ec-d570-4293-8219-b5bcfbad3e2f",
        "http://data.europa.eu/esco/skill/77786157-8482-4c8c-82c6-999b85073c4d",
        "http://data.europa.eu/esco/skill/925463a7-d51f-4d5b-9f79-4d28cf30acde",
        "http://data.europa.eu/esco/skill/197551c2-c5b2-41e8-9b77-676a32ad1e12",
        "http://data.europa.eu/esco/skill/4a193795-fa63-414e-9f2e-bfdb3924571e",
        "http://data.europa.eu/esco/skill/46ec0033-3c71-415e-bcff-b065675ba2dc",
        "http://data.europa.eu/esco/skill/c0e61be1-be87-4774-bdef-db9f6994f3b9",
        "http://data.europa.eu/esco/skill/670c79e9-aa33-41ae-9858-573ade0adb89",
        "http://data.europa.eu/esco/skill/21934d08-3535-4dc2-ae67-fde9fd21dc60",
        "http://data.europa.eu/esco/skill/53103efa-a525-4a5b-81e5-282c4331e72c",
        "http://data.europa.eu/esco/skill/cfb8d64c-f8d7-4894-a02e-2551ab33f1d0",
        "http://data.europa.eu/esco/skill/41c13016-6e94-45bb-81b7-3ff25ac2aa25",
        "http://data.europa.eu/esco/skill/a599d221-3c0f-479b-a032-2d744435df67",
        "http://data.europa.eu/esco/skill/3812bbb9-4053-4685-aed5-af825d809501",
        "http://data.europa.eu/esco/skill/54e4e941-76cd-4bb7-bf25-019d50b737de",
        "http://data.europa.eu/esco/skill/73c22209-d78f-4847-b213-e48409d704a9",
        "http://data.europa.eu/esco/skill/9ec4252d-cbe8-4134-88fa-549dee1883f3",
        "http://data.europa.eu/esco/skill/e8b89eb6-51e8-4c3a-babb-88b2e110376b",
        "http://data.europa.eu/esco/skill/013441c1-1f13-47e9-80c4-9a53e8e1bc05",
        "http://data.europa.eu/esco/skill/55e910e4-736d-44cf-bfa9-b15adc5d91d2",
        "http://data.europa.eu/esco/skill/a80fb090-63f4-4b05-83a5-2f090deb7757",
        "http://data.europa.eu/esco/skill/75719644-f285-4060-b42b-9ed9c4a70375",
        "http://data.europa.eu/esco/skill/03b9b491-fc9b-4868-914a-bf7cd47b5041",
        "http://data.europa.eu/esco/skill/698d7dd3-1192-4f8c-9d1b-478b573b4994",
        "http://data.europa.eu/esco/skill/7a34b3d9-bd3b-4f4e-a0f6-f97439901cb7",
        "http://data.europa.eu/esco/skill/6d3edede-8951-4621-a835-e04323300fa0",
        "http://data.europa.eu/esco/skill/6fe019dd-027f-45f3-b19c-d27f7ae00980",
        "http://data.europa.eu/esco/skill/5dd01a1e-7ba0-4b7f-a76c-ed811c12bfde",
        "http://data.europa.eu/esco/skill/0cd6dcf1-5778-42a5-b685-4d01ae4a4871",
        "http://data.europa.eu/esco/skill/911e13ee-1eec-4243-88c8-3c08a3681a19",
        "http://data.europa.eu/esco/skill/ef983998-fa85-4214-91ba-fb4b2f1e0cd5",
        "http://data.europa.eu/esco/skill/6dc2dfac-3e21-44dd-a71c-9a1c8fe2514c",
        "http://data.europa.eu/esco/skill/1263904f-1c2c-48f5-a6ca-0176ef5d2060",
        "http://data.europa.eu/esco/skill/432439cc-ae2a-4788-8f84-d69297dff68e",
        "http://data.europa.eu/esco/skill/d2e42e14-80be-48cd-bb0e-ea2f0892f951",
        "http://data.europa.eu/esco/skill/89d3faa5-7493-46a3-967b-7b6d4eface0c",
        "http://data.europa.eu/esco/skill/118efbcd-8fc5-4668-81d1-c383a0d16070",
        "http://data.europa.eu/esco/skill/54f78038-58a8-46cb-9633-41ade03c07b7",
        "http://data.europa.eu/esco/skill/e97f4e66-bb24-4727-b053-cadd23cfe29d",
        "http://data.europa.eu/esco/skill/a8797f21-1af0-4c5e-98ca-bf1442929363",
        "http://data.europa.eu/esco/skill/abbf6f61-04eb-4e1a-9694-05ba28ac38bf",
        "http://data.europa.eu/esco/skill/b01df0d7-f56e-48ef-bd3a-85e7f85362e0",
        "http://data.europa.eu/esco/skill/9a58cd26-58eb-4a1c-b1b6-64037fe9cfa1",
        "http://data.europa.eu/esco/skill/913e7e83-b8f8-4574-b1ca-1b38f3fd974a",
        "http://data.europa.eu/esco/skill/cef5c0f8-1e40-4c09-b6a7-aa7811849e5d",
        "http://data.europa.eu/esco/skill/32a76797-6235-4659-869f-c691ffd30463",
        "http://data.europa.eu/esco/skill/4377dd26-a0d6-497c-9ffe-f59308d36648",
        "http://data.europa.eu/esco/skill/4707da90-9cfc-46ca-8de0-38a0b7bfb137",
        "http://data.europa.eu/esco/skill/495ce586-09d7-4cec-83d7-2821be6590c4",
        "http://data.europa.eu/esco/skill/c881ddd2-9c0e-4743-bd24-36be650493dd",
        "http://data.europa.eu/esco/skill/9b960424-c101-4e1b-b0bd-c5aa7ecbb559",
        "http://data.europa.eu/esco/skill/17702c40-e963-4593-847e-a332b1c9357e",
        "http://data.europa.eu/esco/skill/7482a123-e801-48de-9733-262125671410",
        "http://data.europa.eu/esco/skill/84f58e3d-8669-4d83-8c1d-5dd1e73a654f",
        "http://data.europa.eu/esco/skill/7961413f-61d0-4722-9cd9-20a050a29899",
        "http://data.europa.eu/esco/skill/d62d2b4c-a6f8-439e-8a1b-4f29ab5f2c47",
        "http://data.europa.eu/esco/skill/fc3cdc2c-7b79-4b5c-a4b0-f3b996fef849",
        "http://data.europa.eu/esco/skill/8cab2276-1fde-48cb-bb01-b2764b00a635",
        "http://data.europa.eu/esco/skill/3d03c40c-1b83-4793-8902-2523f40af59e",
        "http://data.europa.eu/esco/skill/b157439a-3b5f-4024-8b58-5b3b0182fb0e",
        "http://data.europa.eu/esco/skill/7cbc635a-596b-4784-abba-31526a1fe92f",
        "http://data.europa.eu/esco/skill/f5b33464-4df9-4cf3-b468-b0a2d6b3ee85",
        "http://data.europa.eu/esco/skill/5b26f08b-88bc-45f0-b901-530d7786466b",
        "http://data.europa.eu/esco/skill/d49bfcae-1dbf-4b06-8d34-eb70719ea6ec",
        "http://data.europa.eu/esco/skill/e2d44a9b-f28c-489e-9861-b654b5ded507",
        "http://data.europa.eu/esco/skill/a57a54b6-2f2e-43e4-9621-b52f4a63cb08",
        "http://data.europa.eu/esco/skill/3938da70-dd7a-4092-b039-10c2218867fd",
        "http://data.europa.eu/esco/skill/1d1b0108-3d56-45e2-bf0a-dca06a8ee5e3",
        "http://data.europa.eu/esco/skill/14832d87-2f2f-4895-b290-e4760ebae42a",
        "http://data.europa.eu/esco/skill/dde5de4c-9693-4284-9a7d-deb28c300701",
        "http://data.europa.eu/esco/skill/f08e2bd6-0366-4948-a670-1f03f130126f",
        "http://data.europa.eu/esco/skill/1973c966-f236-40c9-b2d4-5d71a89019be",
        "http://data.europa.eu/esco/skill/15d76317-c71a-4fa2-aadc-2ecc34e627b7",
        "http://data.europa.eu/esco/skill/68269b0a-35c5-4867-bc17-a0b0230fe60c",
        "http://data.europa.eu/esco/skill/91dd8397-063d-499c-83b9-0603a10d94ac",
        "http://data.europa.eu/esco/skill/20f57a7f-b90e-4403-8c77-5ddd89b5835b",
        "http://data.europa.eu/esco/skill/fc4fcb4b-993f-4f2c-b158-c2171ec18ed8",
        "http://data.europa.eu/esco/skill/199f7919-5114-41b6-b6a5-41e0e4896ec1",
        "http://data.europa.eu/esco/skill/0b6c4174-a862-480d-8d55-44f7cf7ac365",
        "http://data.europa.eu/esco/skill/c45848bc-33c6-45fa-b791-bc5b06c21b87",
        "http://data.europa.eu/esco/skill/a006ac4c-3585-43e9-ac1d-a89b80d28e1d",
        "http://data.europa.eu/esco/skill/4bf59dde-8a03-483f-976a-45764f1e6d6f",
        "http://data.europa.eu/esco/skill/0cd3fe82-578f-4f7e-b85e-d63bf0429cb5",
        "http://data.europa.eu/esco/skill/a1728801-a4fd-47b5-862f-12e837f0933c",
        "http://data.europa.eu/esco/skill/3035be48-c249-453f-bf11-cb27219448b8",
        "http://data.europa.eu/esco/skill/9cdec88a-fe17-4f9a-9247-1f1802ab7408",
        "http://data.europa.eu/esco/skill/9973a5a2-7822-4161-99e9-95c781eb63f8",
        "http://data.europa.eu/esco/skill/45f0bf36-2410-4041-8b43-9d3b079afe33",
        "http://data.europa.eu/esco/skill/3d957fb2-b8f4-4b4c-b955-23299c761ad5",
        "http://data.europa.eu/esco/skill/a56dec32-05ef-45de-a256-ee6741f356db",
        "http://data.europa.eu/esco/skill/c3bb5700-a94d-407a-8cd0-147727378f25",
        "http://data.europa.eu/esco/skill/4c772721-9280-49cb-9988-b6ea3d36b06d",
        "http://data.europa.eu/esco/skill/87dacc38-195d-4502-80a5-5c032693a676",
        "http://data.europa.eu/esco/skill/2475cd27-8d6c-4318-a364-21395b23acba",
        "http://data.europa.eu/esco/skill/798d427e-51b3-4cd4-8b24-1357015e9ae7",
        "http://data.europa.eu/esco/skill/aaf57e19-0d41-4361-8de9-bcd858e3f10d",
        "http://data.europa.eu/esco/skill/eb0e5615-1575-4a86-a1a2-7d39595033c5",
        "http://data.europa.eu/esco/skill/7d594881-a9b4-4d4c-8a8b-75082c136b78",
        "http://data.europa.eu/esco/skill/9a7cc3c2-b529-44a4-ab8e-f04fc91362e2",
        "http://data.europa.eu/esco/skill/d31fab87-2a7d-485c-b699-2901ca294b15",
        "http://data.europa.eu/esco/skill/f5dd06b8-5d17-4932-9d03-957d0c4f5051",
        "http://data.europa.eu/esco/skill/0b144726-21c2-46ed-8d13-c03d27f61604",
        "http://data.europa.eu/esco/skill/2d26c072-ec9c-4231-a737-817340a02fdc",
        "http://data.europa.eu/esco/skill/4fb87cb4-6442-4b5d-8bd0-eb1aa743a9ee",
        "http://data.europa.eu/esco/skill/fcc0a1c8-d36e-4f8e-b928-00d5bca10a47",
        "http://data.europa.eu/esco/skill/adc6dc11-3376-467b-96c5-9b0a21edc869",
        "http://data.europa.eu/esco/skill/1349751e-dfb5-492e-89af-e7d9bd2546ac",
        "http://data.europa.eu/esco/skill/19a8293b-8e95-4de3-983f-77484079c389",
        "http://data.europa.eu/esco/skill/56e30a60-0a87-4631-85ea-c69bc8bd0519",
        "http://data.europa.eu/esco/skill/9bf266a6-188b-4d17-a22f-2f266d76832b",
        "http://data.europa.eu/esco/skill/f9670490-8aa4-4540-b121-d440a8294aab",
        "http://data.europa.eu/esco/skill/5b9cde20-f1b9-4adc-bfb3-dbf70b14138d",
        "http://data.europa.eu/esco/skill/9c48a5cc-d4a5-4cef-93f7-504902f35319",
        "http://data.europa.eu/esco/skill/fbbcb9ab-4b95-4e57-a756-30d08b7da7a5",
        "http://data.europa.eu/esco/skill/b9f16465-56a9-426b-a047-0f9f1f95ec92",
        "http://data.europa.eu/esco/skill/e9160feb-109a-41eb-9604-9f898c710d0f",
        "http://data.europa.eu/esco/skill/081d7679-5070-4777-bece-a28c49f15636",
        "http://data.europa.eu/esco/skill/c55caed2-de9e-4a25-819e-a0b0e83fba1b",
        "http://data.europa.eu/esco/skill/2c4e11ef-da18-4e19-816b-e6bc19e12424",
        "http://data.europa.eu/esco/skill/2239694b-771a-4586-8b54-2794e361a9ae",
        "http://data.europa.eu/esco/skill/6360a934-cc87-4954-9656-b32db20592e3",
        "http://data.europa.eu/esco/skill/1fcce318-3212-487a-ac07-4941bc85060d",
        "http://data.europa.eu/esco/skill/fd33c66c-70c4-40e6-b87c-5495bd3bf26e",
        "http://data.europa.eu/esco/skill/56ec6990-3e5b-475f-88e4-2c209f5625b3",
        "http://data.europa.eu/esco/skill/e5d1f825-60ed-4bdd-872a-e748c387f777",
        "http://data.europa.eu/esco/skill/f0699875-51da-48d2-bc92-54b0749baef1",
        "http://data.europa.eu/esco/skill/e9575f7f-053a-439e-8074-f93df3334e92",
        "http://data.europa.eu/esco/skill/f0163b63-6794-4eb7-b17b-f91d11b2602d",
        "http://data.europa.eu/esco/skill/7537779b-152c-49e0-ad65-861e0419c01d",
        "http://data.europa.eu/esco/skill/9bd1ac3d-7656-47dc-83c7-7a5e3d1ea519",
        "http://data.europa.eu/esco/skill/429c6dba-ddf1-43b4-93de-091cbe1b2ef4",
        "http://data.europa.eu/esco/skill/7ee872de-db39-4ae3-8e19-75d1a2cdf697",
        "http://data.europa.eu/esco/skill/9fa68ebb-8522-4ade-85c8-4500f525871b",
        "http://data.europa.eu/esco/skill/d80f7a28-1e75-4247-9104-de8e5f909f0a",
        "http://data.europa.eu/esco/skill/3d69b305-4051-4c1d-ba1e-d8c5b35e22db",
        "http://data.europa.eu/esco/skill/ab9fbd20-807b-45b3-aba9-d5173de7d06d",
        "http://data.europa.eu/esco/skill/81ad8286-cc55-4a08-92a6-38474c35c893",
        "http://data.europa.eu/esco/skill/8b94aa1e-89c9-459d-b3b4-1dfab8dec2df",
        "http://data.europa.eu/esco/skill/a3b516b1-a711-4add-b0de-9f3d05c4b461",
        "http://data.europa.eu/esco/skill/9b4cc066-7df9-40a5-a819-c330e71b2a69",
        "http://data.europa.eu/esco/skill/b6bdf202-524f-475d-b813-2aa9af005c37",
        "http://data.europa.eu/esco/skill/6b6a9252-2ed7-4862-a02f-1578f4a532ea",
        "http://data.europa.eu/esco/skill/32a2c63d-2d13-4784-abb8-678ef2cd8a46",
        "http://data.europa.eu/esco/skill/b1a1149a-9bc5-468d-9d09-f6d171cfd619",
        "http://data.europa.eu/esco/skill/055192dc-f16c-4855-835d-19cac6ff20aa",
        "http://data.europa.eu/esco/skill/bab1c984-b9ab-45d8-90b0-fda90ff4301a",
        "http://data.europa.eu/esco/skill/76b62ef1-b542-4c30-9de2-aac55c1fba6c",
        "http://data.europa.eu/esco/skill/1b957e3d-0017-42b0-9bfe-49a1cdd31de7",
        "http://data.europa.eu/esco/skill/6823f965-fcf8-4728-a0f6-18344c5b41c1",
        "http://data.europa.eu/esco/skill/3a5d7eea-29fa-4449-8487-43cf37b68e53",
        "http://data.europa.eu/esco/skill/d56fc2b5-4b0a-4e7e-9bde-a33736f6ff18",
        "http://data.europa.eu/esco/skill/6474fc36-67ae-436b-9d39-c14402c6a89b",
        "http://data.europa.eu/esco/skill/44b768da-1397-4ff8-b575-d71889a67b9d",
        "http://data.europa.eu/esco/skill/7dd94ad3-13d6-43fe-8b94-51fcbf67ced9",
        "http://data.europa.eu/esco/skill/8327754d-3990-4056-b07e-4faa49cfcd26",
        "http://data.europa.eu/esco/skill/b01444aa-6f62-4b7d-ab30-4385a9148580",
        "http://data.europa.eu/esco/skill/8d81e661-00de-4bbb-9582-920bce0018c9",
        "http://data.europa.eu/esco/skill/a6b79d32-263b-4e13-bb44-047c6b1f8f5e",
        "http://data.europa.eu/esco/skill/bf4d884f-c848-402a-b130-69c266b04164",
        "http://data.europa.eu/esco/skill/0ee7b0d6-db98-4785-9948-f2ef415d155a",
        "http://data.europa.eu/esco/skill/d4ae9564-0b61-4aa0-9df0-d4fdc969fd6f",
        "http://data.europa.eu/esco/skill/e2fb1ee4-fbf9-4690-b677-3e6ff7cfdc48",
        "http://data.europa.eu/esco/skill/33d49d4f-31ec-473f-9b8a-b555aa5116bb",
        "http://data.europa.eu/esco/skill/b820c9de-4d00-4e79-9af9-33f26044ff42",
        "http://data.europa.eu/esco/skill/7253d98c-4a6d-4e37-8b6c-accca9f4b639",
        "http://data.europa.eu/esco/skill/baf501a8-f0fe-4ad7-9b69-8e920fa1a87b",
        "http://data.europa.eu/esco/skill/a8c5e58f-1f0f-40bc-8860-aaab0f64f105",
        "http://data.europa.eu/esco/skill/c3a03c5a-c260-4c26-9b9a-873abb396f4d",
        "http://data.europa.eu/esco/skill/dc30ca46-35dd-41fe-b683-d16747a26574",
        "http://data.europa.eu/esco/skill/54660948-b811-49a9-874c-bf2be5f280a2",
        "http://data.europa.eu/esco/skill/5be3d306-6cf1-4b49-aa1d-01651dd4ba4c",
        "http://data.europa.eu/esco/skill/7b5cce4d-c7fe-4119-b48f-70aa05391787",
        "http://data.europa.eu/esco/skill/d56e2c2f-3e01-4b76-a7bb-ecb6d430172f",
        "http://data.europa.eu/esco/skill/383955b1-9059-47e4-9028-67bb2fdb6be6",
        "http://data.europa.eu/esco/skill/31b67516-af16-4b97-8430-a8a8e0f84190",
        "http://data.europa.eu/esco/skill/3c134a08-521f-489d-9ff0-d84fcdc963eb",
        "http://data.europa.eu/esco/skill/f76b77a7-230b-4d4c-b492-a5479a268816",
        "http://data.europa.eu/esco/skill/2f0a426f-3b95-455b-a872-ef6dee168114",
        "http://data.europa.eu/esco/skill/cd4b9e72-a18d-44bd-b227-14bbdd162dc1",
        "http://data.europa.eu/esco/skill/8af15e52-c743-43da-94aa-c4ea52d4f3e8",
        "http://data.europa.eu/esco/skill/f266380e-9830-44db-8f93-60a6e8b9a1b6",
        "http://data.europa.eu/esco/skill/e439742d-558d-4f52-885e-afdc740b48cf",
        "http://data.europa.eu/esco/skill/c0c08d3e-3215-4197-ac64-00a4f7371d80",
        "http://data.europa.eu/esco/skill/21b298f3-370d-4d9a-8601-ccfa7446446e",
        "http://data.europa.eu/esco/skill/58d7a289-dafd-4363-833f-d1dc4140885e",
        "http://data.europa.eu/esco/skill/7fc4c18a-68f3-425a-aadf-f83633be47a1",
        "http://data.europa.eu/esco/skill/af5e7f45-325f-4424-8724-5692d62caada",
        "http://data.europa.eu/esco/skill/19ba11f3-9c99-41fd-a7c9-f77e6a026186",
        "http://data.europa.eu/esco/skill/be64bb4c-84ac-4c83-8cc7-fc8593e15136",
        "http://data.europa.eu/esco/skill/dbfb9dda-48d9-4a10-9821-3237f868071b",
        "http://data.europa.eu/esco/skill/e3145bd7-7f35-44ec-a5dc-4417c5c9ab9a",
        "http://data.europa.eu/esco/skill/88cc9573-e12f-4915-a915-5c3ee19891cb",
        "http://data.europa.eu/esco/skill/29ca8fd4-40c1-494c-85ea-525f1ab4aa8c",
        "http://data.europa.eu/esco/skill/3ca9b968-03ae-47c8-b428-f0e22861191b",
        "http://data.europa.eu/esco/skill/5a42eaf5-93bb-4bca-8ebd-4d78e96e4929",
        "http://data.europa.eu/esco/skill/633a3637-2c6b-40ae-ac38-289eb2a62aa6",
        "http://data.europa.eu/esco/skill/d4789070-2ff7-4bbb-94ca-8bb1739826a9"
    ],
    "skill_name": [
        "react to mining emergencies",
        "learning management systems",
        "diagnose tropical diseases",
        "environmental policy",
        "computer programming",
        "attend castings",
        "attend meetings",
        "stimulate performers' imagination",
        "manufacturing of tools",
        "design web-based courses",
        "provide user documentation",
        "discuss plays",
        "assign homework",
        "e-learning",
        "study relationships between characters",
        "use body adornment equipment",
        "Schoology",
        "writing techniques",
        "manage several projects",
        "petrology",
        "use functional programming",
        "verify feasibility",
        "use logic programming",
        "apply scientific methods",
        "act reliably",
        "diagnose patients with immunodeficiencies",
        "advise on learning methods",
        "arrange student accommodation",
        "coordinate security",
        "human anatomy",
        "primitive technology",
        "study cultures",
        "Python",
        "digital game creation systems",
        "driving examinations",
        "develop course outline",
        "innovate in ICT",
        "supervise practical courses",
        "review drafts",
        "methods of differential diagnosis",
        "assist people in contaminated areas",
        "design principles",
        "discuss research proposals",
        "numerical sequences",
        "mathematics",
        "interfacing techniques",
        "conduct educational activities",
        "validate biomedical analysis results",
        "logic",
        "Common Lisp",
        "develop design ideas cooperatively",
        "operate 3D computer graphics software",
        "Java",
        "authoring software",
        "instruct others",
        "prepare samples for testing",
        "perform multiple tasks at the same time",
        "perform in a public space",
        "object-oriented modeling",
        "control games",
        "curriculum objectives",
        "task algorithmisation",
        "develop ICT test suite",
        "manipulate object to create illusions",
        "application process",
        "create SCORM packages",
        "government policy",
        "manage ethical dilemmas in genetic testing",
        "motivate others",
        "use object-oriented programming",
        "teach intercultural communication methods",
        "satisfy technical requirements",
        "write research proposals",
        "maintain ICT system",
        "types of strings",
        "tape transcription",
        "gather data",
        "address problems critically",
        "browse, search and filter data, information and digital content",
        "represent special-interest groups' members",
        "match actors to roles",
        "Objective-C",
        "physical medicine",
        "printing techniques",
        "develop curriculum",
        "develop data processing applications",
        "cartography",
        "use scripting programming",
        "resolve shipment issues",
        "teach driving practices",
        "use automatic programming",
        "ABAP",
        "authenticate documents",
        "ethics",
        "coordinate technical teams in artistic productions",
        "test electronic units",
        "palaeoclimatology",
        "craftsmanship",
        "implement relevant technical skills to perform at the highest level in sport",
        "build scaffolding",
        "give live presentation",
        "integrate ICT data",
        "business analysis",
        "prepare lesson content",
        "information structure",
        "optimize  production",
        "observe matter",
        "provide feedback to teachers",
        "manage data collection systems",
        "instructional design models",
        "meet expectations of target audience",
        "deal with challenging work conditions",
        "work with different target groups",
        "develop educational activities",
        "create solutions to problems",
        "provide customer guidance on product selection",
        "occupational science",
        "complete evaluation forms of calls",
        "data models",
        "create project specifications",
        "obtain relevant licenses",
        "carry out work-related calculations",
        "conduct ICT code review",
        "urban pollution implications",
        "operate creasing machinery",
        "style hair",
        "operate insertion mount machine",
        "algebra",
        "use interface description language",
        "chuchotage interpreting",
        "conduct participatory research",
        "post-high school procedures",
        "memorize large amounts of information",
        "make independent operating decisions",
        "interview focus groups",
        "research outdoor activities",
        "develop program ideas",
        "develop a pedagogical concept",
        "analyze  goal progress",
        "teach computer science",
        "machine translation",
        "Eclipse",
        "plan scaffolding",
        "patents",
        "maintain relationship with customers",
        "computer equipment",
        "compile course material",
        "perform resource planning",
        "training  subject expertise",
        "construct individual learning plans",
        "concretise artistic concept",
        "handle data samples",
        "Edmodo",
        "create training materials",
        "assess students",
        "professional documentation in health care",
        "maintain students' discipline",
        "database",
        "apply numeracy skills",
        "test system accessibility for users with special needs",
        "use software libraries",
        "identify progression of disease",
        "use learning strategies",
        "show responsibility",
        "search engines",
        "evaluate information",
        "communication",
        "read scripts",
        "value properties",
        "KDevelop",
        "teach writing",
        "contribute to the programer's reflection process",
        "empathize  with the healthcare user",
        "recruit student ambassador",
        "LDAP",
        "prepare syllabuses for vocational courses",
        "identify with the company's goals",
        "link data between all inland business units",
        "Iterative development",
        "APL",
        "output electronic files",
        "deal with challenging people",
        "monitor student's behavior",
        "think analytically",
        "observe teaching activities",
        "test ICT queries",
        "Canvas",
        "monitor environmental parameters",
        "information confidentiality",
        "assessment processes",
        "English",
        "manage hospital-acquired infections",
        "perform software unit testing",
        "oversee extra-curricular activities",
        "conduct public presentations",
        "arrange tables",
        "use questioning techniques",
        "bioethics",
        "program firmware",
        "create new concepts",
        "study topics",
        "manage resources",
        "compass navigation",
        "outdoor activities",
        "maintain privacy",
        "demonstrate willingness to learn",
        "computer science",
        "debug software",
        "execute software tests",
        "handle helpdesk problems",
        "learning technologies",
        "use shorthand computer program",
        "use techniques to increase patients' motivation",
        "interact with users to gather requirements",
        "integrated development environment software",
        "organize facility activities",
        "provide multimedia content",
        "MATLAB",
        "teach kindergarten class content",
        "design user interface",
        "use spreadsheets software",
        "organize compositions",
        "CSS",
        "solve technical problems",
        "identify cross-curricular links with other subject areas",
        "present exhibition",
        "program  work according to incoming orders",
        "develop employee retention programs",
        "control temperature",
        "write Catalan",
        "use presentation software",
        "Scratch",
        "Pascal",
        "search for explosive devices",
        "check subjects",
        "ensure finished product meet requirements",
        "teach primary education class content",
        "issue penalties to violators of the sanitation code",
        "create database diagrams",
        "make decisions",
        "pedagogy",
        "control air flow",
        "Microsoft Access",
        "use ICT hardware",
        "draw design sketches",
        "id Tech",
        "develop event topics",
        "process commissioned instructions",
        "grammar"
    ]
}